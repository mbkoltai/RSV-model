df_ode_solution_tidy$agegroup_name=factor(paste0("age=",df_ode_solution_tidy$agegroup_name,"yr"),
levels=unique(paste0("age=",df_ode_solution_tidy$agegroup_name,"yr")))
df_ode_solution_tidy$infection=paste0("infection #",df_ode_solution_tidy$infection)
list(df_ode_solution,df_ode_solution_tidy) }
list_simul_output=fun_process_simul_output(ode_solution,varname_list,n_age,n_inf,rsv_age_groups)
finalvals$agegroup_sum_popul
z=data.frame(agegroup=1:11,agegroup_sum_popul=NA)
z
z$agegroup_sum_popul
is.na(z$agegroup_sum_popul)
any(is.na(z$agegroup_sum_popul))
fun_process_simul_output=function(ode_solution,varname_list,n_age,n_inf,rsv_age_groups){
df_ode_solution=ode_solution %>% as.data.frame() %>% setNames(c("t",fun_sirs_varnames(varname_list,n_age,n_inf)))
neg_thresh=-1e-3
if (any(rowSums(df_ode_solution<neg_thresh)>0)){
print(paste0("negative values in ", sum(rowSums(df_ode_solution<neg_thresh)>0), " rows!"))
neg_rows=rowSums(df_ode_solution<neg_thresh)>0
df_ode_solution[neg_rows,!(colnames(df_ode_solution) %in% "t")]=NA
}
# df_ode_solution_nonzero=df_ode_solution[,colSums(df_ode_solution)>0]
df_ode_solution_tidy=df_ode_solution[,colSums(df_ode_solution,na.rm=T)>0] %>% pivot_longer(!t) # ,id.vars='t')
df_ode_solution_tidy[c('compartment','infection','agegroup')]=
sapply(1:3, function(x) {sapply(strsplit(as.character(df_ode_solution_tidy$name),'_'),'[[',x)})
df_ode_solution_tidy$compartment=factor(df_ode_solution_tidy$compartment,levels=varname_list)
df_ode_solution_tidy$agegroup=as.numeric(df_ode_solution_tidy$agegroup)
finalvals=df_ode_solution_tidy %>% group_by(agegroup) %>% filter(t==max(t)) %>% summarise(agegroup_sum_popul=sum(value)) #,na.rm = T
if (any(is.na(z$agegroup_sum_popul))) {
finalvals=df_ode_solution_tidy %>% group_by(agegroup) %>% filter(t==0) %>% summarise(agegroup_sum_popul=sum(value))
}
print(finalvals)
df_ode_solution_tidy[,"value_fract"]=df_ode_solution_tidy$value/finalvals$agegroup_sum_popul[df_ode_solution_tidy$agegroup]
df_ode_solution_tidy[,"t_years"]=df_ode_solution_tidy$t/365
df_ode_solution_tidy[,"agegroup_name"]=rsv_age_groups$agegroup_name[df_ode_solution_tidy$agegroup]
df_ode_solution_tidy$agegroup_name=factor(df_ode_solution_tidy$agegroup_name,
levels=unique(df_ode_solution_tidy$agegroup_name))
df_ode_solution_tidy$agegroup_name=factor(paste0("age=",df_ode_solution_tidy$agegroup_name,"yr"),
levels=unique(paste0("age=",df_ode_solution_tidy$agegroup_name,"yr")))
df_ode_solution_tidy$infection=paste0("infection #",df_ode_solution_tidy$infection)
list(df_ode_solution,df_ode_solution_tidy) }
list_simul_output=fun_process_simul_output(ode_solution,varname_list,n_age,n_inf,rsv_age_groups)
df_ode_solution=list_simul_output[[1]]
df_ode_solution_tidy=list_simul_output[[2]]; rm(list_simul_output)
View(subset(df_ode_solution_tidy,compartment %in% "I"))
ggplot(subset(df_ode_solution_tidy,grepl('I',name)&agegroup<=agegr_lim&(t_years>xval_lims[1]&t_years<xval_lims[2])),
aes_string(x="t_years",y=value_type,group="name",color="infection")) + geom_line(size=1.025) + theme_bw() + standard_theme +
theme(axis.text.x=element_text(size=9,vjust=0.5),axis.text.y=element_text(size=9),legend.position="top",legend.title=element_blank()) +
facet_wrap(as.formula(facet_formula),ncol=as.numeric(ncol_val),scales=scale_val) + scale_x_continuous(breaks=xval_breaks) +
geom_rect(aes(xmin=shutdwn_lims[1]/365,xmax=shutdwn_lims[2]/365,ymin=0,ymax=Inf),fill="pink",color=NA,alpha=0.01) +
geom_vline(data=seas_lims_plot,aes(xintercept=on),color="blue",linetype="dashed",size=0.3) +
geom_vline(data=seas_lims_plot,aes(xintercept=off),color="turquoise4",linetype="dashed",size=0.3) +
ggtitle('RSV infections by age group') + xlab('years') + ylab(y_axis_tag) + labs(caption=caption_txt)
basal_rate_vals=c(0.08,0.1,0.15,0.2,0.21,0.225,0.25); npi_delta_vals=c(-2,0,1,2,3,6)
parscan_df_ode_sol_cases_sum=data.frame(); parscan_season_peaks_AUC=data.frame(); parscan_mean_age_perseason=data.frame()
for (k_basal in 1:length(basal_rate_vals)) {
for (k_npi in 1:length(npi_delta_vals)) {
# basal rate of seas forcing
basal_rate=basal_rate_vals[k_basal]
# seasonal parameters
peak_week=49; season_width=3.8 # (in weeks)
# NPI onset/end
npi_year=4; preseas_npi_on=npi_delta_vals[k_npi]; postseas_npi_off=preseas_npi_on # shutdown_scale=0.2
shutdown_list=fun_shutdown_seasforc(timesteps,elem_time_step,basal_rate,npi_year,peak_week,season_width,
preseas_npi_on,postseas_npi_off,n_prec=0.01,st_devs=2:3,n_sd=2)
forcing_vector_npi=shutdown_list[[1]];shutdwn_lims=shutdown_list[[2]];seas_force=shutdown_list[[3]]; seas_lims=shutdown_list[[4]]
shutdown_scale=forcing_vector_npi[round(mean(shutdwn_lims))]
# simulation
params=list(birth_term,K_m,contmatr_rowvector,inf_vars_inds,susc_vars_inds,forcing_vector_npi,elem_time_step)
# SIMULATE
ptm<-proc.time(); ode_solution<-lsoda(initvals_sirs_model,timesteps,func=sirs_seasonal_forc,parms=params); proc.time()-ptm
print(c(k_basal,k_npi))
# reshape data
list_simul_output=fun_process_simul_output(ode_solution,varname_list,n_age,n_inf,rsv_age_groups)
# df_ode_solution=list_simul_output[[1]]
df_ode_solution_tidy=list_simul_output[[2]]; rm(list_simul_output)
# View(round(df_ode_solution[,grepl("I|t",colnames(df_ode_solution))],2))
# View(subset(df_ode_solution_tidy,compartment %in% "I"))
# symptomatic cases (currently fixed)
df_ode_sol_cases_sum=fun_symptomcases_table(df_ode_solution_tidy,df_symptom_prop, bindcolnames=c("infection","agegroup"),n_sd=2)
df_ode_sol_cases_sum[,"k_basal"]=basal_rate_vals[k_basal]; df_ode_sol_cases_sum[,"k_npi"]=npi_delta_vals[k_npi]
# age distribution
season_peaks_AUC=fcn_seas_agedistrib(df_ode_sol_cases_sum,max_time,timesteps,seas_case_threshold=5e2)
season_peaks_AUC[,"k_basal"]=basal_rate_vals[k_basal]; season_peaks_AUC[,"k_npi"]=npi_delta_vals[k_npi]
# mean age per season
mean_age_perseason=season_peaks_AUC %>% group_by(season) %>%
summarise(season_mean_age=sum(auc_case_share_season*mean_age*agegr_size/sum(agegr_size)),pre_post_shtdn=unique(pre_post_shtdn))
mean_age_perseason[,"k_basal"]=basal_rate_vals[k_basal]; mean_age_perseason[,"k_npi"]=npi_delta_vals[k_npi]
parscan_df_ode_sol_cases_sum=bind_rows(parscan_df_ode_sol_cases_sum,df_ode_sol_cases_sum)
parscan_season_peaks_AUC=bind_rows(parscan_season_peaks_AUC,season_peaks_AUC)
parscan_mean_age_perseason=bind_rows(parscan_mean_age_perseason,mean_age_perseason)
}
}
fun_process_simul_output=function(ode_solution,varname_list,n_age,n_inf,rsv_age_groups){
df_ode_solution=ode_solution %>% as.data.frame() %>% setNames(c("t",fun_sirs_varnames(varname_list,n_age,n_inf)))
neg_thresh=-1e-3
if (any(rowSums(df_ode_solution<neg_thresh)>0)){
print(paste0("negative values in ", sum(rowSums(df_ode_solution<neg_thresh)>0), " rows!"))
neg_rows=rowSums(df_ode_solution<neg_thresh)>0
df_ode_solution[neg_rows,!(colnames(df_ode_solution) %in% "t")]=NA
}
# df_ode_solution_nonzero=df_ode_solution[,colSums(df_ode_solution)>0]
df_ode_solution_tidy=df_ode_solution[,colSums(df_ode_solution,na.rm=T)>0] %>% pivot_longer(!t) # ,id.vars='t')
df_ode_solution_tidy[c('compartment','infection','agegroup')]=
sapply(1:3, function(x) {sapply(strsplit(as.character(df_ode_solution_tidy$name),'_'),'[[',x)})
df_ode_solution_tidy$compartment=factor(df_ode_solution_tidy$compartment,levels=varname_list)
df_ode_solution_tidy$agegroup=as.numeric(df_ode_solution_tidy$agegroup)
finalvals=df_ode_solution_tidy %>% group_by(agegroup) %>% filter(t==max(t)) %>% summarise(agegroup_sum_popul=sum(value)) #,na.rm = T
if (any(is.na(z$agegroup_sum_popul))) {
finalvals=df_ode_solution_tidy %>% group_by(agegroup) %>% filter(t==0) %>% summarise(agegroup_sum_popul=sum(value))
} # print(finalvals)
df_ode_solution_tidy[,"value_fract"]=df_ode_solution_tidy$value/finalvals$agegroup_sum_popul[df_ode_solution_tidy$agegroup]
df_ode_solution_tidy[,"t_years"]=df_ode_solution_tidy$t/365
df_ode_solution_tidy[,"agegroup_name"]=rsv_age_groups$agegroup_name[df_ode_solution_tidy$agegroup]
df_ode_solution_tidy$agegroup_name=factor(df_ode_solution_tidy$agegroup_name,
levels=unique(df_ode_solution_tidy$agegroup_name))
df_ode_solution_tidy$agegroup_name=factor(paste0("age=",df_ode_solution_tidy$agegroup_name,"yr"),
levels=unique(paste0("age=",df_ode_solution_tidy$agegroup_name,"yr")))
df_ode_solution_tidy$infection=paste0("infection #",df_ode_solution_tidy$infection)
list(df_ode_solution,df_ode_solution_tidy) }
basal_rate_vals=c(0.08,0.1,0.15,0.2,0.21,0.225,0.25); npi_delta_vals=c(-2,0,1,2,3,6)
parscan_df_ode_sol_cases_sum=data.frame(); parscan_season_peaks_AUC=data.frame(); parscan_mean_age_perseason=data.frame()
for (k_basal in 1:length(basal_rate_vals)) {
for (k_npi in 1:length(npi_delta_vals)) {
# basal rate of seas forcing
basal_rate=basal_rate_vals[k_basal]
# seasonal parameters
peak_week=49; season_width=3.8 # (in weeks)
# NPI onset/end
npi_year=4; preseas_npi_on=npi_delta_vals[k_npi]; postseas_npi_off=preseas_npi_on # shutdown_scale=0.2
shutdown_list=fun_shutdown_seasforc(timesteps,elem_time_step,basal_rate,npi_year,peak_week,season_width,
preseas_npi_on,postseas_npi_off,n_prec=0.01,st_devs=2:3,n_sd=2)
forcing_vector_npi=shutdown_list[[1]];shutdwn_lims=shutdown_list[[2]];seas_force=shutdown_list[[3]]; seas_lims=shutdown_list[[4]]
shutdown_scale=forcing_vector_npi[round(mean(shutdwn_lims))]
# simulation
params=list(birth_term,K_m,contmatr_rowvector,inf_vars_inds,susc_vars_inds,forcing_vector_npi,elem_time_step)
# SIMULATE
ptm<-proc.time(); ode_solution<-lsoda(initvals_sirs_model,timesteps,func=sirs_seasonal_forc,parms=params); proc.time()-ptm
print(c(k_basal,k_npi))
# reshape data
list_simul_output=fun_process_simul_output(ode_solution,varname_list,n_age,n_inf,rsv_age_groups)
# df_ode_solution=list_simul_output[[1]]
df_ode_solution_tidy=list_simul_output[[2]]; rm(list_simul_output)
# View(round(df_ode_solution[,grepl("I|t",colnames(df_ode_solution))],2))
# View(subset(df_ode_solution_tidy,compartment %in% "I"))
# symptomatic cases (currently fixed)
df_ode_sol_cases_sum=fun_symptomcases_table(df_ode_solution_tidy,df_symptom_prop, bindcolnames=c("infection","agegroup"),n_sd=2)
df_ode_sol_cases_sum[,"k_basal"]=basal_rate_vals[k_basal]; df_ode_sol_cases_sum[,"k_npi"]=npi_delta_vals[k_npi]
# age distribution
season_peaks_AUC=fcn_seas_agedistrib(df_ode_sol_cases_sum,max_time,timesteps,seas_case_threshold=5e2)
season_peaks_AUC[,"k_basal"]=basal_rate_vals[k_basal]; season_peaks_AUC[,"k_npi"]=npi_delta_vals[k_npi]
# mean age per season
mean_age_perseason=season_peaks_AUC %>% group_by(season) %>%
summarise(season_mean_age=sum(auc_case_share_season*mean_age*agegr_size/sum(agegr_size)),pre_post_shtdn=unique(pre_post_shtdn))
mean_age_perseason[,"k_basal"]=basal_rate_vals[k_basal]; mean_age_perseason[,"k_npi"]=npi_delta_vals[k_npi]
parscan_df_ode_sol_cases_sum=bind_rows(parscan_df_ode_sol_cases_sum,df_ode_sol_cases_sum)
parscan_season_peaks_AUC=bind_rows(parscan_season_peaks_AUC,season_peaks_AUC)
parscan_mean_age_perseason=bind_rows(parscan_mean_age_perseason,mean_age_perseason)
}
}
write_csv(parscan_df_ode_sol_cases_sum,"simul_output/parscan_df_ode_sol_cases_sum.csv")
write_csv(parscan_season_peaks_AUC,"simul_output/parscan_season_peaks_AUC.csv")
write_csv(parscan_mean_age_perseason,"simul_output/parscan_mean_age_perseason.csv")
g(scale_val,y_axis_tag,plotvar,foldername,full_filename,caption_txt) %=% fun_sumcase_plot_tags(n_val=2,r_val=2,k_plot=1,
df_symptom_prop,preseas_npi_on,postseas_npi_off,shutdown_scale,basal_rate)
seas_lims_plot=subset(seas_lims,sd==n_sd & on>xval_lims[1] & off<xval_lims[2])
# plot
ggplot(subset(parscan_df_ode_sol_cases_sum,t_years>xval_lims[1] & t_years<(max_time/365-0.05) & agegroup<=6 & agegroup>1),
aes(x=t_years,y=get(plotvar),group=agegroup_name,color=agegroup_name)) + geom_line() + theme_bw() + standard_theme +
theme(axis.text.x=element_text(size=7,vjust=0.5),axis.text.y=element_text(size=6)) +
facet_grid(k_basal~k_npi,scales=scale_val,labeller=labeller(k_basal=label_both,k_npi=label_both)) +
scale_x_continuous(breaks=xval_breaks,minor_breaks=seq(0,max_time/365,by=1/12)) + # scale_y_continuous(breaks=(0:10)/10) + #
scale_color_manual(values = wes_palette(n=5, "Zissou1")) + # scale_color_gradientn(colours=wes_palette("Zissou1")) +
geom_rect(aes(xmin=shutdwn_lims[1]/365,xmax=shutdwn_lims[2]/365,ymin=0,ymax=Inf),fill="grey",color=NA,alpha=0.01) +
geom_vline(data=seas_lims_plot,aes(xintercept=on),color="blue",linetype="dashed",size=0.3) +
geom_vline(data=seas_lims_plot,aes(xintercept=off),color="turquoise4",linetype="dashed",size=0.3) +
xlab('years') + ylab(y_axis_tag) + ggtitle('Symptomatic cases by age group')
# save
ggsave(paste0("simul_output/parscan/parscan_df_ode_sol_cases_sum",c("_absval","_fraction")[k_plot],".png"),width=31,height=22,units="cm")
k_plot
k_plot=1
g(scale_val,y_axis_tag,plotvar,foldername,full_filename,caption_txt) %=% fun_sumcase_plot_tags(n_val=2,r_val=2,k_plot=1,
df_symptom_prop,preseas_npi_on,postseas_npi_off,shutdown_scale,basal_rate)
seas_lims_plot=subset(seas_lims,sd==n_sd & on>xval_lims[1] & off<xval_lims[2])
# plot
ggplot(subset(parscan_df_ode_sol_cases_sum,t_years>xval_lims[1] & t_years<(max_time/365-0.05) & agegroup<=6 & agegroup>1),
aes(x=t_years,y=get(plotvar),group=agegroup_name,color=agegroup_name)) + geom_line() + theme_bw() + standard_theme +
theme(axis.text.x=element_text(size=7,vjust=0.5),axis.text.y=element_text(size=6)) +
facet_grid(k_basal~k_npi,scales=scale_val,labeller=labeller(k_basal=label_both,k_npi=label_both)) +
scale_x_continuous(breaks=xval_breaks,minor_breaks=seq(0,max_time/365,by=1/12)) + # scale_y_continuous(breaks=(0:10)/10) + #
scale_color_manual(values = wes_palette(n=5, "Zissou1")) + # scale_color_gradientn(colours=wes_palette("Zissou1")) +
geom_rect(aes(xmin=shutdwn_lims[1]/365,xmax=shutdwn_lims[2]/365,ymin=0,ymax=Inf),fill="grey",color=NA,alpha=0.01) +
geom_vline(data=seas_lims_plot,aes(xintercept=on),color="blue",linetype="dashed",size=0.3) +
geom_vline(data=seas_lims_plot,aes(xintercept=off),color="turquoise4",linetype="dashed",size=0.3) +
xlab('years') + ylab(y_axis_tag) + ggtitle('Symptomatic cases by age group')
# save
ggsave(paste0("simul_output/parscan/parscan_df_ode_sol_cases_sum",c("_absval","_fraction")[k_plot],".png"),width=31,height=22,units="cm")
plot_season_agedist=subset(parscan_season_peaks_AUC, agegroup<=7 & season>=min(3,npi_year-1))
selvar="auc_case_share_season"; ylimvals=c(min(plot_season_agedist[,selvar]),max(plot_season_agedist[,selvar]))
# if (length(unique(plot_season_agedist$pre_post_shtdn))==3) {linetype_vals=c("dashed","dotted","solid")} else {linetype_vals=c("dotted","solid")}
# PLOT
ggplot(plot_season_agedist,aes(x=agegroup_name,y=get(selvar),group=season)) +
geom_line(aes(linetype=pre_post_shtdn,color=factor(season)),size=1.05) + # ,size=pre_post_shtdn
geom_point(aes(shape=pre_post_shtdn,color=factor(season)),size=1.5) + theme_bw() + standard_theme +
theme(axis.text=element_text(size=7),legend.text=element_text(size=12),legend.title=element_text(size=14)) +
xlab("") + ylab("fraction of all symptomatic cases in season") + # facet_wrap(~season,ncol=3) +
scale_linetype_manual(values=c("solid","dotdash","dashed"))+scale_shape_manual(values=c(0,2,1)) +
facet_grid(k_basal~k_npi,labeller=labeller(k_basal=label_both,k_npi=label_both)) + # scale_size_manual(values=c(1.75,1.25,1.25)) +
# scale_y_continuous(breaks=seq(round(ylimvals[1],2),round(ylimvals[2],2),by=0.02),limits=ylimvals) +
labs(size="pre/post-NPI",shape="pre/post-NPI",color="season",linetype="pre/post-NPI",
title="Age distribution before and after NPI in year 5")
# SAVE
ggsave("simul_output/parscan_season_peaks_AUC.png",width=31,height=22,units="cm")
ggsave("simul_output/parscan/parscan_season_peaks_AUC.png",width=31,height=22,units="cm")
agemax=3; meanage_max=ceiling(max(subset(parscan_mean_age_perseason,season>agemax)[,"season_mean_age"]))+0.5
ggplot(subset(parscan_mean_age_perseason,season>agemax),aes(x=season,y=season_mean_age,fill=pre_post_shtdn)) +
geom_bar(stat="identity",color="black",width =0.7) + facet_grid(k_basal~k_npi,labeller=labeller(k_basal=label_both,k_npi=label_both)) +
# scale_y_continuous(breaks=seq(0,meanage_max,0.5)) + # scale_x_continuous(breaks=0:max(mean_age_perseason$season)) +
geom_rect(aes(xmin=ceiling(shutdwn_lims[1]/365)+0.6,xmax=ceiling(shutdwn_lims[1]/365)+1.4,ymin=0,ymax=meanage_max),
fill="pink",color=NA,alpha=0.1) + theme_bw() + standard_theme + theme(legend.title=element_text("pre/post NPI"),
axis.text.x=element_text(size=9,vjust=0.5)) + ylab("mean age of cases") + # xlab("season") +
geom_text(aes(label=round(season_mean_age,1)),hjust=-0.3,color="black",size=3.5) + coord_cartesian(ylim=c(0.2,meanage_max-0.2)) +
coord_flip()
# SAVE
ggsave("simul_output/parscan/parscan_mean_age_perseason.png",width=31,height=22,units="cm")
rm(list=ls())
standard_theme=theme(# panel.grid=element_line(linetype="dashed",colour="black",size=0.1),
plot.title=element_text(hjust=0.5,size=16),
axis.text.x=element_text(size=9,angle=90),axis.text.y=element_text(size=9),
legend.title=element_text(size=14),legend.text=element_text(size=12),
axis.title=element_text(size=14), text=element_text(family="Calibri"))
library(BayesVarSel)
library(NHANES)
library(dplyr)
df <- force(NHANESraw)
dim(df)
colnames(df)
df <- df %>% dplyr::select(one_of("BMI", "Gender", "Age", "HHIncomeMid",
"TotChol", "Diabetes", "PhysActive", "Alcohol12PlusYr", "SleepHrsNight"))
dim(df)
df <- df[complete.cases(df),]
dim(df)
df <- df %>% mutate(GenderBin = ifelse(Gender=="female",0,1))
df <- df %>% mutate(PhysActiveBin = ifelse(PhysActive=="No",0,1))
df <- df %>% mutate(AlcoholBin = ifelse(Alcohol12PlusYr=="No",0,1))
df <- df %>% mutate(DiabetesBin = ifelse(Diabetes=="No",0,1))
df <- df %>% mutate(Age.centred =  scale(Age,center = TRUE, scale = TRUE))
df <- df %>% mutate(HHIncomeMid.centred =  scale(HHIncomeMid,center = TRUE, scale = TRUE))
df <- df %>% mutate(TotChol.centred =  scale(TotChol,center = TRUE, scale = TRUE))
df <- df %>% mutate(SleepHrsNight.centred =  scale(SleepHrsNight,center = TRUE, scale = TRUE))
dim(df)
head(df)
formula <- BMI ~ GenderBin + Age.centred + HHIncomeMid.centred +
SleepHrsNight.centred + DiabetesBin + TotChol.centred +
PhysActiveBin + AlcoholBin
model1 <- Bvs(formula,data=df)
model1
plot(model1)
summary(model1)
model1$modelsprob
model1$time
model1$postprobdim
plot(model1$postprobdim)
plot(model1$postprobdim,type = "b")
model1$modelsprob$prob
model1$modelsprob$GenderBin
sum(model1$modelsprob$prob)
model1$lmfull
model1$variables
model1$n
model1$p
model1$k
model1$HPMbin
model1$modelsprob
class(model1$modelsprob)
colSums(model1$modelsprob)
model1$modelsprob[1,]
model1$modelsprob[1,]=="*"
colSums(model1$modelsprob=="*")
colSums(model1$modelsprob %in% "*")
colSums(model1$modelsprob=="*")
model1 <- Bvs(formula,data=df,n.keep = 30)
model1
View(model1)
View(print(model1))
View(model1$modelsprob)
sum(model1$modelsprob$prob)
plot(model1,opt="dim")
print(model1$postprobdim)
print(model1$inclprob)
model1$jointinclprob
print(model1)
model1$modelsprob$prob
sum(model1$modelsprob$prob)
model1$lmfull
sim_coef <- BMAcoeff(model1)
colMeans(sim_coef)
histBMA(sim_coef,"AlcoholBin")
histBMA(sim_coef,"GenderBin")
list_variables <- names(df)[10:17]
list_variables
for(i in 1:length(list_variables)){
histBMA(sim_coef,list_variables[i]) }
i
histBMA(sim_coef,list_variables[i])
histBMA(sim_coef,list_variables[1])
histBMA(sim_coef,list_variables[2])
sim_coef
class(sim_coef)
sim_coef[[1]]
View(sim_coef)
sim_coef
sim_coef$AlcoholBin
sim_coef[AlcoholBin]
sim_coef["AlcoholBin"]
sim_coef[["AlcoholBin"]]
as.data.frame(sim_coef)
dim(sim_coef)
sim_coef[,1]
matrix(sim_coef)
as.data.frame(matrix(sim_coef))
all_hist=as.data.frame(matrix(sim_coef))
View(all_hist)
# all_hist=as.data.frame(matrix(sim_coef,ncol = le))
length(list_variables)
dim(sim_coef)
all_hist=as.data.frame(matrix(sim_coef,ncol =ncol(sim_coef)))
View(all_hist)
colnames(all_hist[,2:ncol(all_hist)])=list_variables
View(all_hist)
colnames(all_hist[,2:ncol(all_hist)])
list_variables
colnames(all_hist[,2:ncol(all_hist)])=list_variables
colnames(all_hist[,2:ncol(all_hist)])
ncol(all_hist)
colnames(all_hist[,2:ncol(all_hist)])
colnames(all_hist[,2:ncol(all_hist)])=list_variables
colnames(all_hist)
colnames(all_hist)[2]
colnames(all_hist)[2]=list_variables[1]
class(list_variables)
list_variables
colnames(all_hist)[2:3]=list_variables[1:2]
colnames(all_hist)[2:ncol(all_hist)]=list_variables
all_hist=as.data.frame(matrix(sim_coef,ncol =ncol(sim_coef)))
colnames(all_hist)=c("intercept",list_variables)
head(all_hist %>% pivot_longer())
all_hist=all_hist %>% pivot_longer(cols = everything())
ggplot(all_hist,aes(y=value)) + geom_histogram() + facet_wrap(~name)
ggplot(all_hist,aes(y=value)) + geom_histogram() + facet_wrap(~name)
ggplot(all_hist,aes(x=value)) + geom_histogram() + facet_wrap(~name)
ggplot(all_hist,aes(value)) + geom_histogram(binwidth = 0.01) + facet_wrap(~name)
ggplot(all_hist,aes(value)) + geom_histogram(binwidth = 0.01) + facet_wrap(~name,scales = "free")
ggplot(all_hist,aes(value)) + geom_histogram(binwidth = 0.01) + facet_wrap(~name,scales = "free") + theme_bw()
ggplot(all_hist,aes(value)) + geom_histogram(binwidth = 0.05) + facet_wrap(~name,scales = "free") + theme_bw()
model3 <- Bvs(formula,data=df,n.keep = 50)
sum(model3$modelsprob$prob)
n <- dim(df)[1]
indextry <- sample(1:n,size=10)
ypred <- predict(model1,newdata=df[indextry,])
for(i in 1:length(indextry)){ hist(ypred[,i]);  abline(v=df$BMI[indextry[i]]) }
print(df[indextry,])
ypredmean <- colMeans(ypred)
plot(df$BMI[indextry],ypredmean)
abline(0,1)
for(i in 1:10){
hist(ypred[,i])
abline(v=df$BMI[i])
}
df <- force(NHANESraw)
df <- df %>% dplyr::select(one_of(
"BMI", "Gender", "Age", "HHIncomeMid",
"TotChol", "Diabetes", "PhysActive", "Alcohol12PlusYr",
"SleepHrsNight"))
df <- df[complete.cases(df),]
dim(df)
head(df)
formula <- BMI ~ Gender + Age + HHIncomeMid +
SleepHrsNight + Diabetes + TotChol + PhysActive + Alcohol12PlusYr
bestmodels <- regsubsets(formula,data=df)
summary(bestmodels)
library(leaps)
library(caret)
library(NHANES)
library(dplyr)
bestmodels <- regsubsets(formula,data=df)
summary(bestmodels)
bestmeasures <- summary(bestmodels)
names(bestmeasures)
bestmeasures$rss
bestmeasures$bic
plot(1:8,bestmeasures$bic,type="l")
names(bestmeasures)
bestmeasures$rsq
forwardsel <- summary(regsubsets(formula,data=df,method="forward"))
print(forwardsel)
forwardsel$rss
forwardsel$bic
backwardsel <- summary(regsubsets(formula,data=df,method="backward"))
print(backwardsel)
backwardsel$rss
backwardsel$bic
which.min(backwardsel$rss)
min(backwardsel$rss)
which(backwardsel$rss==min(backwardsel$rss))
summary(regsubsets(formula,data=df,method="backward"))
summary(regsubsets(formula,data=df,method="backward"))[which.min(backwardsel$rss),]
summary(regsubsets(formula,data=df,method="backward"))[which.min(backwardsel$rss)]
summary(regsubsets(formula,data=df,method="backward"))
train.control <- trainControl(method = "cv", number = 10)
formula <- BMI ~ Gender + Age + HHIncomeMid +
SleepHrsNight + Diabetes + TotChol + PhysActive + Alcohol12PlusYr
cv <- train(form=formula, data = df, method = "lm",
trControl = train.control)
cv$results
print(bestmeasures$which)
for(i in 1:8){
modelvar <- names(which(bestmeasures$which[i,-1]==TRUE))
print(modelvar)
rhs <- paste(modelvar,collapse=" + ")
formula <- as.formula(paste("BMI ~ ",rhs))
print(formula)
cv <- train(form=formula, data = df, method = "lm",
trControl = train.control)
print(cv$results)
}
df <- force(NHANESraw)
# We will use a subset of variables. And complete cases only.
# df <- df %>% dplyr::select(one_of(
#   "BMI", "Gender", "Age",
#   "HHIncomeMid", "Poverty", "HomeRooms", "Pulse",
#   "BPSysAve", "BPDiaAve", "DirectChol", "TotChol", "UrineFlow1",
#   "UrineVol1", "Diabetes", "PhysActive", "Alcohol12PlusYr",
#   "SleepHrsNight"))
df <- df %>% dplyr::select(one_of("BMI", "Gender", "Age", "HHIncomeMid",
"TotChol", "Diabetes", "PhysActive", "Alcohol12PlusYr", "SleepHrsNight"))
df <- df[complete.cases(df),]
df <- df %>% mutate(GenderBin = ifelse(Gender=="female",0,1))
df <- df %>% mutate(PhysActiveBin = ifelse(PhysActive=="No",0,1))
df <- df %>% mutate(AlcoholBin = ifelse(Alcohol12PlusYr=="No",0,1))
df <- df %>% mutate(DiabetesBin = ifelse(Diabetes=="No",0,1))
# centre and scale continuous variables
df <- df %>% mutate(Age.centred =  scale(Age,center = TRUE, scale = TRUE))
df <- df %>% mutate(HHIncomeMid.centred = scale(HHIncomeMid,center = TRUE, scale = TRUE))
df <- df %>% mutate(TotChol.centred = scale(TotChol,center = TRUE, scale = TRUE))
df <- df %>% mutate(SleepHrsNight.centred = scale(SleepHrsNight,center = TRUE, scale = TRUE))
formula <- BMI ~ GenderBin + Age.centred + HHIncomeMid.centred +
SleepHrsNight.centred + DiabetesBin + TotChol.centred + PhysActiveBin + AlcoholBin
# default prior: theta ~ Unif(0,1)
model1 <- Bvs(formula,data=df)
sum(model1$modelsprob$prob)
colSums(model1$modelsprob=="*")
plot(model1,opt="dim")
model1$postprobdim
mode(model1$postprobdim)
print(model1)
(for some strange reason, idk why really)
print(model1)
print(model1)$prob
model1$inclprob
model1$HPMbin
model1
df <- force(NHANESraw)
df <- df %>% dplyr::select(one_of("BMI", "Gender", "Age", "HHIncomeMid",
"TotChol", "Diabetes", "PhysActive", "Alcohol12PlusYr", "SleepHrsNight"))
df <- df[complete.cases(df),]
df <- df %>% mutate(GenderBin = ifelse(Gender=="female",0,1))
df <- df %>% mutate(PhysActiveBin = ifelse(PhysActive=="No",0,1))
df <- df %>% mutate(AlcoholBin = ifelse(Alcohol12PlusYr=="No",0,1))
df <- df %>% mutate(DiabetesBin = ifelse(Diabetes=="No",0,1))
# centre and scale continuous variables
df <- df %>% mutate(Age.centred =  scale(Age,center = TRUE, scale = TRUE))
df <- df %>% mutate(HHIncomeMid.centred = scale(HHIncomeMid,center = TRUE, scale = TRUE))
df <- df %>% mutate(TotChol.centred = scale(TotChol,center = TRUE, scale = TRUE))
df <- df %>% mutate(SleepHrsNight.centred = scale(SleepHrsNight,center = TRUE, scale = TRUE))
dim(df)
head(df)
formula <- BMI ~ GenderBin + Age.centred + HHIncomeMid.centred +
SleepHrsNight.centred + DiabetesBin + TotChol.centred + PhysActiveBin + AlcoholBin
model1 <- Bvs(formula,data=df)
sum(model1$modelsprob$prob)
print(model1)
model1$postprobdim
model1
model1$postprobdim
model1
model1$inclprob
model1$jointinclprob
model1$jointinclprob
model1$lmfull
sim_coef <- BMAcoeff(model1)
colMeans(sim_coef)
histBMA(sim_coef,"AlcoholBin")
histBMA(sim_coef,"GenderBin")
sim_coef <- BMAcoeff(model1)
colMeans(sim_coef)
histBMA(sim_coef,"AlcoholBin")
histBMA(sim_coef,"GenderBin")
list_variables <- names(df)[10:17]
print(list_variables)
for(i in 1:length(list_variables)){ histBMA(sim_coef,list_variables[i]) }
list_variables
histBMA(sim_coef,list_variables[i])
all_hist=as.data.frame(matrix(sim_coef,ncol =ncol(sim_coef))); colnames(all_hist)=c("intercept",list_variables)
all_hist=all_hist %>% pivot_longer(cols = everything())
ggplot(all_hist,aes(value)) + geom_histogram(binwidth = 0.05) + facet_wrap(~name,scales = "free") + theme_bw()
for(i in 1:length(list_variables)){ histBMA(sim_coef,list_variables[i]) }
histBMA(sim_coef,list_variables[i])
ggplot(all_hist,aes(value)) + geom_histogram(binwidth = 0.05) + facet_wrap(~name,scales = "free") + theme_bw()
dim(sim_coef)
?BMAcoeff
names(df)
ggplot(all_hist,aes(value)) + geom_histogram(binwidth = 0.05) + facet_wrap(~name,scales = "free") + theme_bw()
names(df)
