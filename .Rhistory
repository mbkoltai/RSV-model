### ### ###
# assign SUSCEPT params
delta_primary<-as.numeric(partable[k_par,] %>% select(contains("delta")))
l_susc=fcn_delta_susc(delta_primary,n_age,n_inf,partable$agedep_val[k_par],rsv_age_groups$stationary_popul)
if (serial_loop) {    g(delta_susc,delta_susc_prop) %=% l_susc} else { delta_susc=l_susc[[1]]; delta_susc_prop=l_susc[[2]] }
# set initial conds
R0_rank_withinn_deptype_depval=(partable %>% group_by(dep_type,R0) %>% mutate(R0_no=row_number()))$R0_no[k_par]
if (R0_rank_withinn_deptype_depval==1){
initvals_sirs_model <- fcn_set_initconds(rsv_age_groups$stationary_popul,init_set=c("previous","fromscratch")[2],
init_cond_src=c("output","file")[1],ode_solution,init_seed=10,seed_vars="all",filename="") } else {
initvals_sirs_model <- matrix(ode_solution[nrow(ode_solution)-1,2:ncol(ode_solution)]) }
# set length of simulation and seasonality
l_seas<-fun_shutdown_seasforc(npi_dates,
years_pre_post_npi=c(ifelse(R0_rank_withinn_deptype_depval==1,simul_length_yr,round(simul_length_yr*0.5)),0),
season_width_wks=seasforc_width_wks,init_mt_day="06-01",ifelse(grepl("exp",partable$dep_type[k_par]),45,49),
forcing_above_baseline=partable$seasforce_peak[k_par], npireduc_strength=0.5)
if (serial_loop){ g(n_years,timesteps,simul_start_end,forcing_vector_npi) %=% l_seas} else {
timesteps=l_seas[[2]]; simul_start_end=l_seas[[3]]; forcing_vector_npi=l_seas[[4]] }
# set params
params<-list(list(birth_rates,matrix(unlist(lapply(uk_death_rate,function(x) rep(x,n_inf*n_compartment))))),
K_m,contmatr_rowvector,inf_vars_inds,susc_vars_inds,delta_susc)
# maternal immunity?
if (mat_imm_flag){ params[[7]] <- mat_imm_inds}
# interpolation fcns for seas forcing & extern introds
approx_seas_forc <- approxfun(data.frame(t=timesteps,seas_force=forcing_vector_npi))
approx_introd <- approxfun(data.frame(t=timesteps,as.numeric(timesteps %% 30==0)*10))
# run simul
if (!mat_imm_flag){ ode_solution <- lsoda(initvals_sirs_model,timesteps,func=sirs_seasonal_forc,parms=params) } else {
ode_solution <- lsoda(initvals_sirs_model,timesteps,func=sirs_seasonal_forc_mat_immun,parms=params)     }
df_cases_infs <- fcn_process_odesol_incid(ode_solution,n_age,n_inf,n_compartment,simul_start_end)
# print progress
print(paste0(round(1e2*k_par/nrow(partable)),"% , dep_val=",partable$dep_val[k_par],", R0=",round(partable$R0[k_par],2),
", suscept=",paste0(round(delta_primary,3),collapse=","),", seas peak rel. baseline=",(partable$seasforce_peak[k_par]+1)*100,"%") )
sel_t_point <- unique((df_cases_infs %>% filter(date == as.Date("2019-07-01")))$t)
stat_sol_allparsets[,k_par] <- matrix(ode_solution[sel_t_point,2:ncol(ode_solution)]) # nrow(ode_solution)-1
# final population (it's stationary, shldnt change)
final_pop <- data.frame(agegroup=1:n_age,final=round(unlist(lapply(lapply((0:(n_age-1))*(n_inf*n_compartment),
function(x) (1:(n_inf*n_compartment))+x ), function(x_sum) sum(stat_sol_allparsets[1:(n_age*n_inf*n_compartment),k_par][x_sum])))))
# calc attack rates
sum_inf_epiyear_age <- left_join(df_cases_infs %>% mutate(year=year(date),epi_year=ifelse(date>ymd(paste(year(date),"-07-01")),
year(date),year(date)-1),in_out_season=ifelse(week(date)<=9 | week(date)>=41,"in","out")) %>%
group_by(epi_year,agegroup) %>% summarise(inf_tot=round(sum(value)),inf_in_seas=round(sum(value[in_out_season=="in"])),
max_incid_week=mean(week(date[value==max(value,na.rm=T)]))) %>% group_by(agegroup) %>% filter(epi_year>min(epi_year)),
final_pop,by="agegroup") %>%
mutate(attack_rate_perc=100*inf_tot/final,
seas_share=inf_in_seas/inf_tot,dep_val=partable$dep_val[k_par],par_id=partable$par_id[k_par],
seasforce_peak=partable$seasforce_peak[k_par],dep_type=partable$dep_type[k_par],R0=partable$R0[k_par])
# store parameters # list_delta_primary[[k_par]]=delta_primary
# store outputs
# if (serial_loop){
if (k_par==1) {all_sum_inf_epiyear_age=sum_inf_epiyear_age} else {
all_sum_inf_epiyear_age=rbind(all_sum_inf_epiyear_age,sum_inf_epiyear_age)
if (k_par==nrow(partable)) {
all_sum_inf_epiyear_age <- left_join(all_sum_inf_epiyear_age %>%
mutate(agegroup_name=factor(rsv_age_groups$agegroup_name[agegroup])),estim_attack_rates,by="agegroup_name") %>%
mutate(attack_rate_check=ifelse(attack_rate_perc>=min_est&attack_rate_perc<=max_est,T,F),
seas_share_check=ifelse(seas_share>seas_conc_lim,T,F)) } }
# } else { all_sum_inf_epiyear_age[[k_par]]=sum_inf_epiyear_age }
# parallel # left_join(,partable %>% select(par_id,dep_val,seasforce_peak),by=c("dep_val","seasforce_peak"))
} # end loop
round(proc.time()-tm,2)
if (!serial_loop) {stopCluster(cl)}
simul_length_yr
years_pre_post_npi
R0_rank_withinn_deptype_depval
l_seas
class(l_seas)
length(l_seas)
l_seas[[1]]
l_seas[[2]]
c(ifelse(R0_rank_withinn_deptype_depval==1,simul_length_yr,round(simul_length_yr*0.5)),0)
simul_length_yr
k_start_end
c(1,2)
paste0(c(1,2),"_")
paste0(c(1,2),collapse="_")
paste0(k_start_end,collapse="_")
parsets1_2 <- read_csv("simul_output/parscan/parallel/parsets1_2.csv")
View(parsets1_2) #  <- read_csv("simul_output/parscan/parallel/parsets1_2.csv")
nrow(partable)/7
nrow(partable)
seq(1,nrow(partable),length.out = 7)
seq(1,nrow(partable),length.out = 8)
round(seq(1,nrow(partable),length.out = 8))
round(seq(1,nrow(partable),length.out=8))[2:7]
round(seq(1,nrow(partable),length.out=8))[2:7]+1
sort(c(round(seq(1,nrow(partable),length.out=8)),round(seq(1,nrow(partable),length.out=8))[2:7]+1))
matrix(sort(c(round(seq(1,nrow(partable),length.out=8)),round(seq(1,nrow(partable),length.out=8))[2:7]+1)),nrow=2)
data.frame(t(matrix(sort(c(round(seq(1,nrow(partable),length.out=8)),round(seq(1,nrow(partable),length.out=8))[2:7]+1)),nrow=2)))
parscan_split <- data.frame(t(matrix(sort(c(round(seq(1,nrow(partable),length.out=8)),
round(seq(1,nrow(partable),length.out=8))[2:7]+1)),nrow=2)))
parscan_split
matrix(sort(c(round(seq(1,nrow(partable),length.out=8)),
round(seq(1,nrow(partable),length.out=8))[2:7]+1)),nrow=2)
list(matrix(sort(c(round(seq(1,nrow(partable),length.out=8)),
round(seq(1,nrow(partable),length.out=8))[2:7]+1)),nrow=2))
parscan_split <- matrix(sort(c(round(seq(1,nrow(partable),length.out=8)),round(seq(1,nrow(partable),length.out=8))[2:7]+1)),nrow=2)
parscan_split
lapply(1:ncol(parscan_split), function(x) parscan_split[,x])
parscan_split <- matrix(sort(c(round(seq(1,nrow(partable),length.out=8)),round(seq(1,nrow(partable),length.out=8))[2:7]+1)),nrow=2)
parscan_split <- lapply(1:ncol(parscan_split), function(x) parscan_split[,x])
parscan_split
parscan_split <- lapply(1:ncol(parscan_split),
function(x) matrix(sort(c(round(seq(1,nrow(partable),length.out=8)),round(seq(1,nrow(partable),length.out=8))[2:7]+1)),nrow=2)[,x])
parscan_split <- lapply(1:7,
function(x) matrix(sort(c(round(seq(1,nrow(partable),length.out=8)),round(seq(1,nrow(partable),length.out=8))[2:7]+1)),nrow=2)[,x])
parscan_split
k
k=1
paste0("nohup --vanilla Rscript my_script.R ",parscan_split[[k]]," &> nohup_1.out")
paste0("nohup --vanilla Rscript my_script.R ",parscan_split[[k]]," &> nohup_1.out",collapse = "")
paste0("nohup --vanilla Rscript my_script.R ",paste0(parscan_split[[k]],sep=" ")," &> nohup_1.out",collapse = "")
paste0(parscan_split[[k]],sep=" ")
paste0("nohup Rscript  --vanilla my_script.R ",paste0(parscan_split[[k]],collapse=" ")," &> nohup_1.out",collapse = "")
lapply(1:7, function(x)
paste0("nohup Rscript  --vanilla my_script.R ",paste0(parscan_split[[x]],collapse=" ")," &> nohup_1.out",ifelse(k<7,"\n",""),
collapse="") )
k
lapply(1:7, function(x) paste0("nohup Rscript  --vanilla my_script.R ",paste0(parscan_split[[x]],collapse=" ")," &> nohup_1.out",
ifelse(x<7,"\n",""),collapse="") )
paste0(unlist(lapply(1:7, function(x) paste0("nohup Rscript  --vanilla my_script.R ",paste0(parscan_split[[x]],collapse=" ")," &> nohup_1.out",
ifelse(x<7,"\n",""),collapse="") )),collapse=" ")
write.table(paste0(unlist(lapply(1:7, function(x) paste0("nohup Rscript  --vanilla my_script.R ",paste0(parscan_split[[x]],collapse=" ")," &> nohup_1.out",
ifelse(x<7,"\n",""),collapse="") )),collapse=" "),file="run_parallel_scan.sh",col.names=F,row.names=F)
write.table(paste0("#!/bin/bash\n",unlist(lapply(1:7, function(x) paste0("nohup Rscript  --vanilla my_script.R ",paste0(parscan_split[[x]],collapse=" ")," &> nohup_1.out",
ifelse(x<7,"\n",""),collapse="") )),collapse=" "),file="run_parallel_scan.sh",col.names=F,row.names=F,quote=F)
paste0("#!/bin/bash\n",paste0(unlist(lapply(1:7, function(x) paste0("nohup Rscript  --vanilla my_script.R ",paste0(parscan_split[[x]],collapse=" ")," &> nohup_1.out",
ifelse(x<7,"\n",""),collapse="") )),collapse=" "))
write.table(paste0("#!/bin/bash\n",paste0(unlist(lapply(1:7, function(x) paste0("nohup Rscript  --vanilla my_script.R ",paste0(parscan_split[[x]],collapse=" ")," &> nohup_1.out",
ifelse(x<7,"\n",""),collapse="") )),collapse=" ")),file="run_parallel_scan.sh",col.names=F,row.names=F,quote=F)
write.table(paste0("#!/bin/bash\n",paste0(unlist(lapply(1:7, function(x) paste0("nohup Rscript  --vanilla my_script.R ",
paste0(parscan_split[[x]],collapse=" ")," &> simul_output/parscan/parallel/nohup_",k,".out",ifelse(x<7,"\n",""),collapse="") )),
collapse=" ")),file="run_parallel_scan.sh",col.names=F,row.names=F,quote=F)
write.table(paste0("#!/bin/bash\n",paste0(unlist(lapply(1:7, function(x) paste0("nohup Rscript  --vanilla my_script.R ",
paste0(parscan_split[[x]],collapse=" ")," &> simul_output/parscan/parallel/nohup_",x,".out",ifelse(x<7,"\n",""),collapse="") )),
collapse=" ")),file="run_parallel_scan.sh",col.names=F,row.names=F,quote=F)
write.table(paste0("#!/bin/bash\n",paste0(unlist(lapply(1:7, function(x) paste0("nohup Rscript  --vanilla my_script.R ",
paste0(parscan_split[[x]],collapse=" ")," > simul_output/parscan/parallel/nohup_",x,".out",ifelse(x<7,"& \n",""),collapse="") )),
collapse=" ")),file="run_parallel_scan.sh",col.names=F,row.names=F,quote=F)
write.table(paste0("#!/bin/bash\n",paste0(unlist(lapply(1:7, function(x) paste0("nohup Rscript  --vanilla my_script.R ",
paste0(parscan_split[[x]],collapse=" ")," > simul_output/parscan/parallel/nohup_",x,".out",ifelse(x<7," & \n",""),collapse="") )),
collapse=" ")),file="run_parallel_scan.sh",col.names=F,row.names=F,quote=F)
write.table(paste0("#!/bin/bash\n",paste0(unlist(lapply(1:7, function(x) paste0("nohup Rscript  --vanilla my_script.R ",
paste0(parscan_split[[x]],collapse=" ")," > simul_output/parscan/parallel/nohup_",x,".out",ifelse(x<7," & \n",""),collapse="") )),
collapse="")),file="run_parallel_scan.sh",col.names=F,row.names=F,quote=F)
write.table(paste0("#!/bin/bash\n",paste0(unlist(lapply(1:7, function(x) paste0("nohup Rscript --vanilla my_script.R ",
paste0(parscan_split[[x]],collapse=" ")," > simul_output/parscan/parallel/nohup_",x,".out",ifelse(x<7," & \n",""),collapse="") )),
collapse="")),file="run_parallel_scan.sh",col.names=F,row.names=F,quote=F)
write.table(paste0("#!/bin/bash\n",paste0(unlist(lapply(1:7, function(x) paste0("nohup Rscript --vanilla parscan_runner_cmd_line.R ",
paste0(parscan_split[[x]],collapse=" ")," > simul_output/parscan/parallel/nohup_",x,".out",ifelse(x<7," & \n",""),collapse="") )),
collapse="")),file="run_parallel_scan.sh",col.names=F,row.names=F,quote=F)
rsv_age_groups$stationary_popul
R0_rank_withinn_deptype_depval
R0_rank_within_deptype_depval=R0_rank_within_deptype_depval
R0_rank_within_deptype_depval=R0_rank_withinn_deptype_depval
(partable %>% group_by(dep_type,R0) %>% mutate(R0_no=row_number()))$R0_no
initvals_sirs_model
ode_solution
fcn_set_initconds(rsv_age_groups$stationary_popul,init_set=c("previous","fromscratch")[2],
init_cond_src=c("output","file")[1],ode_solution,init_seed=10,seed_vars="all",filename="")
rm(list=ls()); currentdir_path=dirname(rstudioapi::getSourceEditorContext()$path); setwd(currentdir_path)
# library(contactdata); library(fitdistrplus);  library(bbmle); library(Rcpp); library(GillespieSSA)
# lapply(c("tidyverse","deSolve","gtools","rstudioapi","wpp2019","plotly","Rcpp","zoo","lubridate","tsibble","pracma","qs","ungeviz"),
#       library,character.only=TRUE) # library(doParallel)
# load constant parameters and functions
source("load_params.R")
# estimated attack rates
estim_attack_rates <- data.frame(agegroup_name=rsv_age_groups$agegroup_name, # paste0("age=",,"yr")
median_est=c(rep(65,4),rep(40,4),10,8,5)) %>% mutate(min_est=median_est*0.25,max_est=median_est*2.5,
median_all_inf=c(rep(70,4),rep(60,4),50,30,20),min_est_all_inf=median_all_inf*0.5,max_est_all_inf=median_all_inf*1.5)
# % cases within season (filtering parameter sets)
seas_conc_lim=0.8
# parameter sets to search through
selsets<-c(2,4:8)
p_table <- bind_rows(expand.grid(list(dep_type="age",dep_val=seq(0.5,4,by=0.5)[selsets],R0=seq(12,14,0.5)/10,
seasforce_peak=seq(1.1,1.5,by=0.1))),
bind_rows(lapply(selsets, function(x) expand.grid(list(dep_type="exp",dep_val=x,
seasforce_peak=list(c(0.8,1,1.2),c(1.125,1.25,1.375),c(1,1.25,1.5),c(1,1.25,1.5),
c(1,1.125,1.25),c(1.25,1.375,1.5),c(1.25,1.375,1.5),c(1.25,1.375,1.5))[[x]],
R0=list( (12:14)/10,(12:14)/10,seq(13,16,1.5)/10,seq(15,18,1.5)/10, seq(14,20,2)/10,
seq(15,18,1)/10,(18:20)/10,(24:26)/10)[[x]]))))) %>% arrange(dep_type,dep_val,R0,seasforce_peak) %>% rowid_to_column("par_id")
# p_table <- read_csv("simul_output/parscan/sel_parsets/sel_parsets.csv") %>% rowid_to_column("par_id")
partable <- fcn_create_partable(p_table,nstep=10, scale_age_exp=c(0.35,0.29),pop_struct=rsv_age_groups$stationary_popul,
susc_denomin=100,susc_min=0.11,nage=11,ninf=3,rhoval=rho) %>% mutate(dep_val=ifelse(dep_type=="age",dep_val*2,dep_val))
# save the stat sol of all param sets
stat_sol_allparsets=matrix(0,nrow=(n_compartment+1)*n_age*n_inf,ncol=nrow(partable))
# NPI dates
npi_dates=as.Date(c("2020-03-26","2021-05-17"))
# width of season (from peak)
seasforc_width_wks<-8
# length of simulations
simul_length_yr=18
# agegroup indices for maternal immunity
mat_imm_flag <- TRUE
mat_imm_inds<-list(fun_sub2ind(i_inf=1,j_age=1,"R",c("S","I","R"),11,3),fun_sub2ind(i_inf=c(1,2,3),j_age=9,"R",c("S","I","R"),11,3),
fun_sub2ind(i_inf=c(1,2,3),j_age=9,"S",c("S","I","R"),11,3))
### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ###
# parallelisation
#!/bin/bash
system("Rscript write_run_file.R 7")
nrow(partable)
system("Rscript write_run_file.R 7 210")
system("Rscript write_run_file.R 7 210")
serial_loop
k_par
k_par=1
delta_primary<-as.numeric(partable[k_par,] %>% select(contains("delta")))
l_susc=fcn_delta_susc(delta_primary,n_age,n_inf,partable$agedep_val[k_par],rsv_age_groups$stationary_popul)
if (serial_loop) {    g(delta_susc,delta_susc_prop) %=% l_susc} else { delta_susc=l_susc[[1]]; delta_susc_prop=l_susc[[2]] }
serial_loop=TRUE; if (!serial_loop) {all_sum_inf_epiyear_age=list(); cl=parallel::makeCluster(6); registerDoParallel(cl)}
delta_primary<-as.numeric(partable[k_par,] %>% select(contains("delta")))
l_susc=fcn_delta_susc(delta_primary,n_age,n_inf,partable$agedep_val[k_par],rsv_age_groups$stationary_popul)
if (serial_loop) {    g(delta_susc,delta_susc_prop) %=% l_susc} else { delta_susc=l_susc[[1]]; delta_susc_prop=l_susc[[2]] }
R0_rank_within_deptype_depval=(partable %>% group_by(dep_type,R0) %>% mutate(R0_no=row_number()))$R0_no[k_par]
R0_rank_within_deptype_depval
fcn_set_initconds(rsv_age_groups$stationary_popul,init_set=c("previous","fromscratch")[2],
init_cond_src=c("output","file")[1],ode_solution,init_seed=10,seed_vars="all",filename="")
ode_solution
ode_solution
R0_rank_within_deptype_depval==1
initvals_sirs_model
initvals_sirs_model <- fcn_set_initconds(rsv_age_groups$stationary_popul,init_set=c("previous","fromscratch")[2],
init_cond_src=c("output","file")[1],NA,init_seed=10,seed_vars="all",filename="")
initvals_sirs_model
partable %>% group_by(dep_type,R0) %>% mutate(R0_no=row_number()))$R0_no
partable %>% group_by(dep_type,R0) %>% mutate(R0_no=row_number())
partable <- fcn_create_partable(p_table,nstep=10, scale_age_exp=c(0.35,0.29),pop_struct=rsv_age_groups$stationary_popul,
susc_denomin=100,susc_min=0.11,nage=11,ninf=3,rhoval=rho) %>% mutate(dep_val=ifelse(dep_type=="age",dep_val*2,dep_val)) %>%
group_by(dep_type,R0) %>% mutate(R0_no=row_number())
partable$R0_no[k_par]
partable$R0_no
partable %>% filter(R0_no==1)
years_pre_post_npi
R0_rank_within_deptype_depval
if (R0_rank_within_deptype_depval==1){
initvals_sirs_model <- fcn_set_initconds(rsv_age_groups$stationary_popul,init_set=c("previous","fromscratch")[2],
init_cond_src=c("output","file")[1],NA,init_seed=10,seed_vars="all",filename="") } else {
initvals_sirs_model <- matrix(ode_solution[nrow(ode_solution)-1,2:ncol(ode_solution)]) }
l_seas<-fun_shutdown_seasforc(npi_dates,
years_pre_post_npi=c(ifelse(R0_rank_within_deptype_depval==1,simul_length_yr,round(simul_length_yr*0.5)),0),
season_width_wks=seasforc_width_wks,init_mt_day="06-01",ifelse(grepl("exp",partable$dep_type[k_par]),45,49),
forcing_above_baseline=partable$seasforce_peak[k_par], npireduc_strength=0.5)
l_seas
names(l_seas)
length(l_seas)
View(l_seas)
l_seas[[1]]
l_seas[[2]]
c(ifelse(R0_rank_within_deptype_depval==1,simul_length_yr,round(simul_length_yr*0.5)),0)
simul_length_yr=8
# agegroup indices for maternal immunity
mat_imm_flag <- TRUE
mat_imm_inds<-list(fun_sub2ind(i_inf=1,j_age=1,"R",c("S","I","R"),11,3),fun_sub2ind(i_inf=c(1,2,3),j_age=9,"R",c("S","I","R"),11,3),
fun_sub2ind(i_inf=c(1,2,3),j_age=9,"S",c("S","I","R"),11,3))
### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ###
# parallelisation (write file that'll run scripts)
system("Rscript write_run_file.R 7 210")
### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ###
serial_loop=TRUE; if (!serial_loop) {all_sum_inf_epiyear_age=list(); cl=parallel::makeCluster(6); registerDoParallel(cl)}
delta_primary<-as.numeric(partable[k_par,] %>% select(contains("delta")))
l_susc=fcn_delta_susc(delta_primary,n_age,n_inf,partable$agedep_val[k_par],rsv_age_groups$stationary_popul)
if (serial_loop) {    g(delta_susc,delta_susc_prop) %=% l_susc} else { delta_susc=l_susc[[1]]; delta_susc_prop=l_susc[[2]] }
# set initial conds
R0_rank_within_deptype_depval=partable$R0_no[k_par]
if (R0_rank_within_deptype_depval==1){
initvals_sirs_model <- fcn_set_initconds(rsv_age_groups$stationary_popul,init_set=c("previous","fromscratch")[2],
init_cond_src=c("output","file")[1],NA,init_seed=10,seed_vars="all",filename="") } else {
initvals_sirs_model <- matrix(ode_solution[nrow(ode_solution)-1,2:ncol(ode_solution)]) }
l_seas<-fun_shutdown_seasforc(npi_dates,
years_pre_post_npi=c(ifelse(R0_rank_within_deptype_depval==1,simul_length_yr,round(simul_length_yr*0.5)),0),
season_width_wks=seasforc_width_wks,init_mt_day="06-01",ifelse(grepl("exp",partable$dep_type[k_par]),45,49),
forcing_above_baseline=partable$seasforce_peak[k_par], npireduc_strength=0.5)
if (serial_loop){ g(n_years,timesteps,simul_start_end,forcing_vector_npi) %=% l_seas} else {
timesteps=l_seas[[2]]; simul_start_end=l_seas[[3]]; forcing_vector_npi=l_seas[[4]] }
n_years
params<-list(list(birth_rates,matrix(unlist(lapply(uk_death_rate,function(x) rep(x,n_inf*n_compartment))))),
K_m,contmatr_rowvector,inf_vars_inds,susc_vars_inds,delta_susc)
# maternal immunity?
if (mat_imm_flag){ params[[7]] <- mat_imm_inds}
# interpolation fcns for seas forcing & extern introds
approx_seas_forc <- approxfun(data.frame(t=timesteps,seas_force=forcing_vector_npi))
approx_introd <- approxfun(data.frame(t=timesteps,as.numeric(timesteps %% 30==0)*10))
mat_imm_flag
tm<-proc.time(); if (!mat_imm_flag){ ode_solution <- lsoda(initvals_sirs_model,timesteps,func=sirs_seasonal_forc,parms=params) } else {
ode_solution <- lsoda(initvals_sirs_model,timesteps,func=sirs_seasonal_forc_mat_immun,parms=params)     }
df_cases_infs <- fcn_process_odesol_incid(ode_solution,n_age,n_inf,n_compartment,simul_start_end); round(proc.time()-tm,2)
3.89/9
4e4/3600
tm<-proc.time(); ode_solution <- lsoda(initvals_sirs_model,timesteps,func=sirs_seasonal_forc_mat_immun,parms=params); round(proc.time()-tm,2)
tm<-proc.time(); df_cases_infs <- fcn_process_odesol_incid(ode_solution,n_age,n_inf,n_compartment,simul_start_end); round(proc.time()-tm,2)
paste0("Rscript write_run_file.R 7 ",nrow(partable))
seq_len(4)
seq(1,18,3)
k_length
k_length=7
paste0("#!/bin/bash\n",paste0(unlist(lapply(1:k_length,
function(x) paste0("nohup Rscript --vanilla parscan_starter_cmd_line.R ",
paste0(k_length,collapse=" ")," > simul_output/parscan/parallel/nohup_starter_",x,".out",ifelse(x<k_length," & \n",""),collapse="") )),
collapse=""))
string_start_run <- paste0("#!/bin/bash\n",paste0(unlist(lapply(1:k_length,
function(x) paste0("nohup Rscript --vanilla parscan_starter_cmd_line.R ",
paste0(x,collapse=" ")," > simul_output/parscan/parallel/nohup_starter_",x,".out",ifelse(x<k_length," & \n",""),collapse="") )),
collapse=""))
string_start_run
c(x,k_length)
paste0(c(1,3),collapse=" ")
string_start_run <- paste0("#!/bin/bash\n",paste0(unlist(lapply(1:k_length,
function(x) paste0("nohup Rscript --vanilla parscan_starter_cmd_line.R ",
paste0(c(x,k_length),collapse=" ")," > simul_output/parscan/parallel/nohup_starter_",x,".out",ifelse(x<k_length," & \n",""),collapse="") )),
collapse=""))
string_start_run
system(paste0("Rscript write_run_file.R 7 ",nrow(partable)))
string_start_run
system(paste0("Rscript write_run_file.R 7 ",nrow(partable)))
seq(1,18,length.out = 7)
round(seq(1,18,length.out = 7))
lims<-round(seq(1,18,length.out = 7))
lims[c(1,2)]
lims[c(2,3)]
lims[c(3,5)]
lims[c(3,4)]
round(seq(1,18,length.out = 7))
arg_vals_section_length=c(1,7)
arg_vals_section_length
round(seq(1,nrow(partable),length.out=arg_vals_section_length[2]))
round(seq(1,nrow(partable),length.out=arg_vals_section_length[2]))[c(arg_vals_section_length[1],arg_vals_section_length[1]+1)]
arg_vals_section_length
arg_vals_section_length=c(2,7)
round(seq(1,nrow(partable),length.out=arg_vals_section_length[2]))[c(arg_vals_section_length[1],arg_vals_section_length[1]+1)]
nrow(partable)
partable <- fcn_create_partable(p_table,nstep=10, scale_age_exp=c(0.35,0.29),pop_struct=rsv_age_groups$stationary_popul,
susc_denomin=100,susc_min=0.11,nage=11,ninf=3,rhoval=rho) %>% mutate(dep_val=ifelse(dep_type=="age",dep_val*2,dep_val)) %>%
group_by(dep_type,R0) %>% mutate(R0_no=row_number()) %>% filter(R0_no==1)
round(seq(1,nrow(partable),length.out=arg_vals_section_length[2]))[c(arg_vals_section_length[1],arg_vals_section_length[1]+1)]
round(seq(1,nrow(partable),length.out=arg_vals_section_length[2]))[c(arg_vals_section_length[1],arg_vals_section_length[1]+1)]
ode_solution[nrow(ode_solution),]
ode_solution[nrow(ode_solution)-1,]
round(ode_solution[nrow(ode_solution)-1,])
ode_sols
ode_sols<-data.frame()
ode_sols <- bind_rows(ode_sols,ode_solution[nrow(ode_solution)-1,])
ode_sols
paste0("simul_output/parscan/parallel/parsets_start",paste0(k_start_end,collapse="_"),".csv")
k_start_end=round(seq(1,nrow(partable),length.out=arg_vals_section_length[2]))[c(arg_vals_section_length[1],arg_vals_section_length[1]+1)]
k_start_end
paste0("simul_output/parscan/parallel/parsets_start",paste0(k_start_end,collapse="_"),".csv")
dim(all_sum_inf_epiyear_age)
class(ode_solution)
class(ode_sols)
head(bind_rows(ode_sols,ode_solution[nrow(ode_solution)-1,]) %>% mutate(par_id=partable$par_id[k_par]))
k_start_end
k_start_end=round(seq(1,nrow(partable),
length.out=arg_vals_section_length_simuldur[2]))[c(arg_vals_section_length_simuldur[1],arg_vals_section_length_simuldur[1]+1)]
ode_sols <- data.frame()
k_start_end=round(seq(1,nrow(partable),
length.out=arg_vals_section_length_simuldur[2]))[c(arg_vals_section_length_simuldur[1],arg_vals_section_length_simuldur[1]+1)]
ode_sols <- data.frame()
arg_vals_section_length_simuldur=c(1,4,9)
k_start_end=round(seq(1,nrow(partable),
length.out=arg_vals_section_length_simuldur[2]))[c(arg_vals_section_length_simuldur[1],arg_vals_section_length_simuldur[1]+1)]
ode_sols <- data.frame()
k_start_end
arg_vals_section_length_simuldur
c(arg_vals_section_length_simuldur[1],arg_vals_section_length_simuldur[1]+1)
round(seq(1,nrow(partable),
length.out=arg_vals_section_length_simuldur[2]))[c(arg_vals_section_length_simuldur[1],arg_vals_section_length_simuldur[1]+1)]
round(seq(1,nrow(partable),
length.out=arg_vals_section_length_simuldur[2]))
arg_vals_section_length_simuldur[2]
arg_vals_section_length_simuldur[2]=7
round(seq(1,nrow(partable),
length.out=arg_vals_section_length_simuldur[2]))[c(arg_vals_section_length_simuldur[1],arg_vals_section_length_simuldur[1]+1)]
k_start_end=round(seq(1,nrow(partable),
length.out=arg_vals_section_length_simuldur[2]))[c(arg_vals_section_length_simuldur[1],arg_vals_section_length_simuldur[1]+1)]
ode_sols <- data.frame()
k_start_end[1]:k_start_end[2]
k_par
delta_primary<-as.numeric(partable[k_par,] %>% select(contains("delta")))
l_susc=fcn_delta_susc(delta_primary,n_age,n_inf,partable$agedep_val[k_par],rsv_age_groups$stationary_popul)
if (serial_loop) { g(delta_susc,delta_susc_prop) %=% l_susc} else { delta_susc=l_susc[[1]]; delta_susc_prop=l_susc[[2]] }
delta_primary
k_par
partable
rsv_age_groups$stationary_popul
partable$agedep_val[k_par]
fcn_delta_susc(delta_primary,n_age,n_inf,partable$agedep_val[k_par],rsv_age_groups$stationary_popul)
fcn_delta_susc
n_age
# fcn_delta_susc(delta_primary,n_age,n_inf,partable$agedep_val[k_par],rsv_age_groups$stationary_popul)
partable$agedep_val[k_par]
fcn_delta_susc(delta_primary,n_age,n_inf,agedepfact=partable$agedep_val[k_par],total_pop=rsv_age_groups$stationary_popul)
deltaprim
delta_primary
partable[k_par,]
as.numeric(partable[k_par,] %>% select(contains("delta")))
k_par
partable[k_par,] %>% select(contains("delta"))
as.numeric(partable[k_par,] %>% ungroup() %>% select(contains("delta")))
delta_primary<-as.numeric(partable[k_par,] %>% ungroup() %>% select(contains("delta")))
l_susc=fcn_delta_susc(delta_primary,n_age,n_inf,partable$agedep_val[k_par],rsv_age_groups$stationary_popul)
npi_dates
l_seas<-fun_shutdown_seasforc(npi_dates,
years_pre_post_npi=c(ifelse(R0_rank_withinn_deptype_depval==1,simul_length_yr,round(simul_length_yr*0.5)),0),
season_width_wks=seasforc_width_wks,init_mt_day="06-01",ifelse(grepl("exp",partable$dep_type[k_par]),45,49),
forcing_above_baseline=partable$seasforce_peak[k_par], npireduc_strength=0.5)
k_par
delta_primary<-as.numeric(partable[k_par,] %>% ungroup() %>% select(contains("delta")))
l_susc=fcn_delta_susc(delta_primary,n_age,n_inf,partable$agedep_val[k_par],rsv_age_groups$stationary_popul)
if (serial_loop) { g(delta_susc,delta_susc_prop) %=% l_susc} else { delta_susc=l_susc[[1]]; delta_susc_prop=l_susc[[2]] }
# set initial conds
R0_rank_within_deptype_depval=(partable %>% group_by(dep_type,R0) %>% mutate(R0_no=row_number()))$R0_no[k_par]
if (R0_rank_within_deptype_depval==1){
initvals_sirs_model <- fcn_set_initconds(rsv_age_groups$stationary_popul,init_set=c("previous","fromscratch")[2],
init_cond_src=c("output","file")[1],ode_solution,init_seed=10,seed_vars="all",filename="") } else {
initvals_sirs_model <- matrix(ode_solution[nrow(ode_solution)-1,2:ncol(ode_solution)]) }
# set length of simulation and seasonality
l_seas<-fun_shutdown_seasforc(npi_dates,
years_pre_post_npi=c(ifelse(R0_rank_within_deptype_depval==1,simul_length_yr,round(simul_length_yr*0.5)),0),
season_width_wks=seasforc_width_wks,init_mt_day="06-01",ifelse(grepl("exp",partable$dep_type[k_par]),45,49),
forcing_above_baseline=partable$seasforce_peak[k_par], npireduc_strength=0.5)
if (serial_loop){ g(n_years,timesteps,simul_start_end,forcing_vector_npi) %=% l_seas} else {
timesteps=l_seas[[2]]; simul_start_end=l_seas[[3]]; forcing_vector_npi=l_seas[[4]] }
params<-list(list(birth_rates,matrix(unlist(lapply(uk_death_rate,function(x) rep(x,n_inf*n_compartment))))),
K_m,contmatr_rowvector,inf_vars_inds,susc_vars_inds,delta_susc)
if (mat_imm_flag){ params[[7]] <- mat_imm_inds}
approx_seas_forc <- approxfun(data.frame(t=timesteps,seas_force=forcing_vector_npi))
approx_introd <- approxfun(data.frame(t=timesteps,as.numeric(timesteps %% 30==0)*10))
if (!mat_imm_flag){ ode_solution <- lsoda(initvals_sirs_model,timesteps,func=sirs_seasonal_forc,parms=params) } else {
ode_solution <- lsoda(initvals_sirs_model,timesteps,func=sirs_seasonal_forc_mat_immun,parms=params)     }
df_cases_infs <- fcn_process_odesol_incid(ode_solution,n_age,n_inf,n_compartment,simul_start_end)
print(paste0(round(1e2*k_par/nrow(partable)),"% , dep_val=",partable$dep_val[k_par],", R0=",round(partable$R0[k_par],2),
", suscept=",paste0(round(delta_primary,3),collapse=","),", seas peak rel. baseline=",(partable$seasforce_peak[k_par]+1)*100,"%") )
sel_t_point <- unique((df_cases_infs %>% filter(date == as.Date("2019-07-01")))$t)
stat_sol_allparsets[,k_par] <- matrix(ode_solution[sel_t_point,2:ncol(ode_solution)]) # nrow(ode_solution)-1
# final population (it's stationary, shldnt change)
final_pop <- data.frame(agegroup=1:n_age,final=round(unlist(lapply(lapply((0:(n_age-1))*(n_inf*n_compartment),
function(x) (1:(n_inf*n_compartment))+x ), function(x_sum) sum(stat_sol_allparsets[1:(n_age*n_inf*n_compartment),k_par][x_sum])))))
# calc attack rates
sum_inf_epiyear_age <- left_join(df_cases_infs %>% mutate(year=year(date),epi_year=ifelse(date>ymd(paste(year(date),"-07-01")),
year(date),year(date)-1),in_out_season=ifelse(week(date)<=9 | week(date)>=41,"in","out")) %>%
group_by(epi_year,agegroup) %>% summarise(inf_tot=round(sum(value)),inf_in_seas=round(sum(value[in_out_season=="in"])),
max_incid_week=mean(week(date[value==max(value,na.rm=T)]))) %>% group_by(agegroup) %>% filter(epi_year>min(epi_year)),
final_pop,by="agegroup") %>%
mutate(attack_rate_perc=100*inf_tot/final,
seas_share=inf_in_seas/inf_tot,dep_val=partable$dep_val[k_par],par_id=partable$par_id[k_par],
seasforce_peak=partable$seasforce_peak[k_par],dep_type=partable$dep_type[k_par],R0=partable$R0[k_par])
if (k_par==1) {all_sum_inf_epiyear_age=sum_inf_epiyear_age} else {
all_sum_inf_epiyear_age=rbind(all_sum_inf_epiyear_age,sum_inf_epiyear_age)
if (k_par==nrow(partable)) {
all_sum_inf_epiyear_age <- left_join(all_sum_inf_epiyear_age %>%
mutate(agegroup_name=factor(rsv_age_groups$agegroup_name[agegroup])),estim_attack_rates,by="agegroup_name") %>%
mutate(attack_rate_check=ifelse(attack_rate_perc>=min_est&attack_rate_perc<=max_est,T,F),
seas_share_check=ifelse(seas_share>seas_conc_lim,T,F)) } }
ode_sols <- bind_rows(ode_sols,ode_solution[nrow(ode_solution)-1,]) %>% mutate(par_id=partable$par_id[k_par])
fun_shutdown_seasforc
R0_rank_within_deptype_depval
simul_length_yr
R0_rank_within_deptype_depval
c(ifelse(R0_rank_within_deptype_depval==1,simul_length_yr,round(simul_length_yr*0.5)),0)
seasforc_width_wks,init_mt_day="06-01",ifelse(grepl("exp",partable$dep_type[k_par]),45,49)
ifelse(grepl("exp",partable$dep_type[k_par]),45,49)
seasforc_width_wks
partable$seasforce_peak
k_par
source("fcns/RSV_model_functions.R")
l_seas<-fun_shutdown_seasforc(npi_dates,
years_pre_post_npi=c(ifelse(R0_rank_within_deptype_depval==1,simul_length_yr,round(simul_length_yr*0.5)),0),
season_width_wks=seasforc_width_wks,init_mt_day="06-01",ifelse(grepl("exp",partable$dep_type[k_par]),45,49),
forcing_above_baseline=partable$seasforce_peak[k_par], npireduc_strength=0.5)
as.Date("2021-06-01")
seasforc_width_wks
print(c(ifelse(R0_rank_within_deptype_depval==1,simul_length_yr,round(simul_length_yr*0.5)),0))
as.Date("2021-06-01")
base::as.Date("2021-06-01")
zoo::as.Date("2021-06-01")
as.Date <- zoo::as.Date
as.Date
parsets_start1_4<-read_csv("simul_output/parscan/parallel/parsets_start1_4.csv")
dim(parsets_start1_4)
View(parsets_start1_4)
head(partable,4)
head(ode_solution[nrow(ode_solution)-1,]) %>% mutate(par_id=partable$par_id[k_par])
ode_solution[nrow(ode_solution)-1,]) %>% mutate(par_id=partable$par_id[k_par]
ode_solution[nrow(ode_solution)-1,] %>% mutate(par_id=partable$par_id[k_par])
ode_solution[nrow(ode_solution)-1,]
data.frame(ode_solution[nrow(ode_solution)-1,] %>% mutate(par_id=partable$par_id[k_par]))
data.frame(ode_solution[nrow(ode_solution)-1,]) %>% mutate(par_id=partable$par_id[k_par])
data.frame(ode_solution[nrow(ode_solution)-1,])
dim(ode_solution[nrow(ode_solution)-1,])
ode_solution[nrow(ode_solution)-1,]
t(ode_solution[nrow(ode_solution)-1,])
t(t(ode_solution[nrow(ode_solution)-1,]))
data.frame(ode_solution[nrow(ode_solution)-1,]) %>% mutate(par_id=partable$par_id[k_par])
data.frame(ode_solution[nrow(ode_solution)-1,2:ncol(ode_solution)]) %>%
mutate(par_id=partable$par_id[k_par])
round(data.frame(ode_solution[nrow(ode_solution)-1,2:ncol(ode_solution)]) %>%
mutate(par_id=partable$par_id[k_par]))
head(round(data.frame(ode_solution[nrow(ode_solution)-1,2:ncol(ode_solution)]) %>% mutate(par_id=partable$par_id[k_par])),3)
colname(ode_sols)
colnames(ode_sols)
ode_sols <- data.frame()
ode_sols <- bind_rows(ode_sols,data.frame(ode_solution[nrow(ode_solution)-1,2:ncol(ode_solution)]) %>%
mutate(par_id=partable$par_id[k_par]) )
colnames(ode_sols)
colnames(ode_sols)[1]<-"var_vals"
ode_sols
system(paste0("Rscript write_run_file.R 7 ",nrow(partable),9))
paste0("Rscript write_run_file.R 7 ",nrow(partable),9)
paste0("Rscript write_run_file.R 7",nrow(partable),9,collapse=" ")
paste0(c("Rscript write_run_file.R 7",nrow(partable),9),collapse=" ")
ls
ls()
