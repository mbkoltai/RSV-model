seasforce_peak=list(c(0.8,1,1.2),c(1.125,1.25,1.375),c(1,1.25,1.5),c(1,1.25,1.5),
c(1,1.125,1.25),c(1.25,1.375,1.5),c(1.25,1.375,1.5),c(1.25,1.375,1.5))[[x]],
R0=list( (12:14)/10,(12:14)/10,seq(13,16,1.5)/10,seq(15,18,1.5)/10, seq(14,20,2)/10,
seq(15,18,1)/10,(18:20)/10,(24:26)/10)[[x]]))))) %>% arrange(dep_type,dep_val,R0,seasforce_peak) %>% rowid_to_column("par_id")
partable <- fcn_create_partable(p_table,nstep=10, scale_age_exp=c(0.35,0.29),pop_struct=rsv_age_groups$stationary_popul,
susc_denomin=100,susc_min=0.11,nage=11,ninf=3,rhoval=rho)
View(partable)
partable <- partable %>% mutate(dep_val=ifelse(dep_type=="age",dep_val*2,dep_val))
stat_sol_allparsets=matrix(0,nrow=(n_compartment+1)*n_age*n_inf,ncol=nrow(partable))
nrow(partable)
simul_length_yr=18
# agegroup indices for maternal immunity
mat_imm_inds<-list(fun_sub2ind(i_inf=1,j_age=1,"R",c("S","I","R"),11,3),fun_sub2ind(i_inf=c(1,2,3),j_age=9,"R",c("S","I","R"),11,3),
fun_sub2ind(i_inf=c(1,2,3),j_age=9,"S",c("S","I","R"),11,3))
mat_imm_inds
mat_imm_flag <- TRUE
mat_imm_inds<-list(fun_sub2ind(i_inf=1,j_age=1,"R",c("S","I","R"),11,3),fun_sub2ind(i_inf=c(1,2,3),j_age=9,"R",c("S","I","R"),11,3),
fun_sub2ind(i_inf=c(1,2,3),j_age=9,"S",c("S","I","R"),11,3))
tm<-proc.time()
# foreach (k_par=1:nrow(partable),.packages=c("dplyr","deSolve","tidyr","lubridate")) %dopar% { #
for (k_par in 1:nrow(partable)){
### ### ###
# assign SUSCEPT params
delta_primary<-as.numeric(partable[k_par,] %>% select(contains("delta")))
l_susc=fcn_delta_susc(delta_primary,n_age,n_inf,partable$agedep_val[k_par],rsv_age_groups$stationary_popul)
if (serial_loop) {    g(delta_susc,delta_susc_prop) %=% l_susc} else { delta_susc=l_susc[[1]]; delta_susc_prop=l_susc[[2]] }
# set initial conds
R0_rank_withinn_deptype_depval=(partable %>% group_by(dep_type,R0) %>% mutate(R0_no=row_number()))$R0_no[k_par]
if (R0_rank_withinn_deptype_depval==1){
initvals_sirs_model <- fcn_set_initconds(rsv_age_groups$stationary_popul,init_set=c("previous","fromscratch")[2],
init_cond_src=c("output","file")[1],ode_solution,init_seed=10,seed_vars="all",filename="") } else {
initvals_sirs_model <- matrix(ode_solution[nrow(ode_solution)-1,2:ncol(ode_solution)]) }
# set length of simulation and seasonality
l_seas<-fun_shutdown_seasforc(npi_dates,
years_pre_post_npi=c(ifelse(R0_rank_withinn_deptype_depval==1,simul_length_yr,round(simul_length_yr*0.5)),0),
season_width_wks=seasforc_width_wks,init_mt_day="06-01",ifelse(grepl("exp",partable$dep_type[k_par]),45,49),
forcing_above_baseline=partable$seasforce_peak[k_par], npireduc_strength=0.5)
if (serial_loop){ g(n_years,timesteps,simul_start_end,forcing_vector_npi) %=% l_seas} else {
timesteps=l_seas[[2]]; simul_start_end=l_seas[[3]]; forcing_vector_npi=l_seas[[4]] }
# set params
params<-list(list(birth_rates,matrix(unlist(lapply(uk_death_rate,function(x) rep(x,n_inf*n_compartment))))),
K_m,contmatr_rowvector,inf_vars_inds,susc_vars_inds,delta_susc)
# maternal immunity?
if (mat_imm_flag){ params[[7]] <- mat_imm_inds}
# interpolation fcns for seas forcing & extern introds
approx_seas_forc <- approxfun(data.frame(t=timesteps,seas_force=forcing_vector_npi))
approx_introd <- approxfun(data.frame(t=timesteps,as.numeric(timesteps %% 30==0)*10))
# run simul
if (!mat_imm_flag){ ode_solution <- lsoda(initvals_sirs_model,timesteps,func=sirs_seasonal_forc,parms=params) } else {
ode_solution <- lsoda(initvals_sirs_model,timesteps,func=sirs_seasonal_forc_mat_immun,parms=params)     }
df_cases_infs <- fcn_process_odesol_incid(ode_solution,n_age,n_inf,n_compartment,simul_start_end)
# print progress
print(paste0(round(1e2*k_par/nrow(partable)),"% , dep_val=",partable$dep_val[k_par],", R0=",round(r0_try,2),
", suscept=",paste0(round(delta_primary,3),collapse=","),", seas peak rel. baseline=",(partable$seasforce_peak[k_par]+1)*100,"%") )
sel_t_point <- unique((df_cases_infs %>% filter(date == as.Date("2019-07-01")))$t)
stat_sol_allparsets[,k_par] <- matrix(ode_solution[sel_t_point,2:ncol(ode_solution)]) # nrow(ode_solution)-1
# final population (it's stationary, shldnt change)
final_pop <- data.frame(agegroup=1:n_age,final=round(unlist(lapply(lapply((0:(n_age-1))*(n_inf*n_compartment),
function(x) (1:(n_inf*n_compartment))+x ), function(x_sum) sum(stat_sol_allparsets[1:(n_age*n_inf*n_compartment),k_par][x_sum])))))
# calc attack rates
sum_inf_epiyear_age <- left_join(df_cases_infs %>% mutate(year=year(date),epi_year=ifelse(date>ymd(paste(year(date),"-07-01")),
year(date),year(date)-1),in_out_season=ifelse(week(date)<=9 | week(date)>=41,"in","out")) %>%
group_by(epi_year,agegroup) %>% summarise(inf_tot=round(sum(value)),inf_in_seas=round(sum(value[in_out_season=="in"])),
max_incid_week=mean(week(date[value==max(value,na.rm=T)]))) %>% group_by(agegroup) %>% filter(epi_year>min(epi_year)),
final_pop,by="agegroup") %>%
mutate(attack_rate_perc=100*inf_tot/final,
seas_share=inf_in_seas/inf_tot,dep_val=partable$dep_val[k_par],par_id=partable$par_id[k_par],
seasforce_peak=partable$seasforce_peak[k_par],dep_type=partable$dep_type[k_par],R0=partable$R0[k_par])
# store parameters # list_delta_primary[[k_par]]=delta_primary
# store outputs
# if (serial_loop){
if (k_par==1) {all_sum_inf_epiyear_age=sum_inf_epiyear_age} else {
all_sum_inf_epiyear_age=rbind(all_sum_inf_epiyear_age,sum_inf_epiyear_age)
if (k_par==nrow(partable)) {
all_sum_inf_epiyear_age <- left_join(all_sum_inf_epiyear_age %>%
mutate(agegroup_name=factor(rsv_age_groups$agegroup_name[agegroup])),estim_attack_rates,by="agegroup_name") %>%
mutate(attack_rate_check=ifelse(attack_rate_perc>=min_est&attack_rate_perc<=max_est,T,F),
seas_share_check=ifelse(seas_share>seas_conc_lim,T,F)) } }
# } else { all_sum_inf_epiyear_age[[k_par]]=sum_inf_epiyear_age }
# parallel # left_join(,partable %>% select(par_id,dep_val,seasforce_peak),by=c("dep_val","seasforce_peak"))
} # end loop
round(proc.time()-tm,2)
if (!serial_loop) {stopCluster(cl)}
serial_loop=TRUE
tm<-proc.time()
# foreach (k_par=1:nrow(partable),.packages=c("dplyr","deSolve","tidyr","lubridate")) %dopar% { #
for (k_par in 1:nrow(partable)){
### ### ###
# assign SUSCEPT params
delta_primary<-as.numeric(partable[k_par,] %>% select(contains("delta")))
l_susc=fcn_delta_susc(delta_primary,n_age,n_inf,partable$agedep_val[k_par],rsv_age_groups$stationary_popul)
if (serial_loop) {    g(delta_susc,delta_susc_prop) %=% l_susc} else { delta_susc=l_susc[[1]]; delta_susc_prop=l_susc[[2]] }
# set initial conds
R0_rank_withinn_deptype_depval=(partable %>% group_by(dep_type,R0) %>% mutate(R0_no=row_number()))$R0_no[k_par]
if (R0_rank_withinn_deptype_depval==1){
initvals_sirs_model <- fcn_set_initconds(rsv_age_groups$stationary_popul,init_set=c("previous","fromscratch")[2],
init_cond_src=c("output","file")[1],ode_solution,init_seed=10,seed_vars="all",filename="") } else {
initvals_sirs_model <- matrix(ode_solution[nrow(ode_solution)-1,2:ncol(ode_solution)]) }
# set length of simulation and seasonality
l_seas<-fun_shutdown_seasforc(npi_dates,
years_pre_post_npi=c(ifelse(R0_rank_withinn_deptype_depval==1,simul_length_yr,round(simul_length_yr*0.5)),0),
season_width_wks=seasforc_width_wks,init_mt_day="06-01",ifelse(grepl("exp",partable$dep_type[k_par]),45,49),
forcing_above_baseline=partable$seasforce_peak[k_par], npireduc_strength=0.5)
if (serial_loop){ g(n_years,timesteps,simul_start_end,forcing_vector_npi) %=% l_seas} else {
timesteps=l_seas[[2]]; simul_start_end=l_seas[[3]]; forcing_vector_npi=l_seas[[4]] }
# set params
params<-list(list(birth_rates,matrix(unlist(lapply(uk_death_rate,function(x) rep(x,n_inf*n_compartment))))),
K_m,contmatr_rowvector,inf_vars_inds,susc_vars_inds,delta_susc)
# maternal immunity?
if (mat_imm_flag){ params[[7]] <- mat_imm_inds}
# interpolation fcns for seas forcing & extern introds
approx_seas_forc <- approxfun(data.frame(t=timesteps,seas_force=forcing_vector_npi))
approx_introd <- approxfun(data.frame(t=timesteps,as.numeric(timesteps %% 30==0)*10))
# run simul
if (!mat_imm_flag){ ode_solution <- lsoda(initvals_sirs_model,timesteps,func=sirs_seasonal_forc,parms=params) } else {
ode_solution <- lsoda(initvals_sirs_model,timesteps,func=sirs_seasonal_forc_mat_immun,parms=params)     }
df_cases_infs <- fcn_process_odesol_incid(ode_solution,n_age,n_inf,n_compartment,simul_start_end)
# print progress
print(paste0(round(1e2*k_par/nrow(partable)),"% , dep_val=",partable$dep_val[k_par],", R0=",round(r0_try,2),
", suscept=",paste0(round(delta_primary,3),collapse=","),", seas peak rel. baseline=",(partable$seasforce_peak[k_par]+1)*100,"%") )
sel_t_point <- unique((df_cases_infs %>% filter(date == as.Date("2019-07-01")))$t)
stat_sol_allparsets[,k_par] <- matrix(ode_solution[sel_t_point,2:ncol(ode_solution)]) # nrow(ode_solution)-1
# final population (it's stationary, shldnt change)
final_pop <- data.frame(agegroup=1:n_age,final=round(unlist(lapply(lapply((0:(n_age-1))*(n_inf*n_compartment),
function(x) (1:(n_inf*n_compartment))+x ), function(x_sum) sum(stat_sol_allparsets[1:(n_age*n_inf*n_compartment),k_par][x_sum])))))
# calc attack rates
sum_inf_epiyear_age <- left_join(df_cases_infs %>% mutate(year=year(date),epi_year=ifelse(date>ymd(paste(year(date),"-07-01")),
year(date),year(date)-1),in_out_season=ifelse(week(date)<=9 | week(date)>=41,"in","out")) %>%
group_by(epi_year,agegroup) %>% summarise(inf_tot=round(sum(value)),inf_in_seas=round(sum(value[in_out_season=="in"])),
max_incid_week=mean(week(date[value==max(value,na.rm=T)]))) %>% group_by(agegroup) %>% filter(epi_year>min(epi_year)),
final_pop,by="agegroup") %>%
mutate(attack_rate_perc=100*inf_tot/final,
seas_share=inf_in_seas/inf_tot,dep_val=partable$dep_val[k_par],par_id=partable$par_id[k_par],
seasforce_peak=partable$seasforce_peak[k_par],dep_type=partable$dep_type[k_par],R0=partable$R0[k_par])
# store parameters # list_delta_primary[[k_par]]=delta_primary
# store outputs
# if (serial_loop){
if (k_par==1) {all_sum_inf_epiyear_age=sum_inf_epiyear_age} else {
all_sum_inf_epiyear_age=rbind(all_sum_inf_epiyear_age,sum_inf_epiyear_age)
if (k_par==nrow(partable)) {
all_sum_inf_epiyear_age <- left_join(all_sum_inf_epiyear_age %>%
mutate(agegroup_name=factor(rsv_age_groups$agegroup_name[agegroup])),estim_attack_rates,by="agegroup_name") %>%
mutate(attack_rate_check=ifelse(attack_rate_perc>=min_est&attack_rate_perc<=max_est,T,F),
seas_share_check=ifelse(seas_share>seas_conc_lim,T,F)) } }
# } else { all_sum_inf_epiyear_age[[k_par]]=sum_inf_epiyear_age }
# parallel # left_join(,partable %>% select(par_id,dep_val,seasforce_peak),by=c("dep_val","seasforce_peak"))
} # end loop
round(proc.time()-tm,2)
if (!serial_loop) {stopCluster(cl)}
npi_dates=as.Date(c("2020-03-26","2021-05-17"))
npi_dates
tm<-proc.time()
# foreach (k_par=1:nrow(partable),.packages=c("dplyr","deSolve","tidyr","lubridate")) %dopar% { #
for (k_par in 1:nrow(partable)){
### ### ###
# assign SUSCEPT params
delta_primary<-as.numeric(partable[k_par,] %>% select(contains("delta")))
l_susc=fcn_delta_susc(delta_primary,n_age,n_inf,partable$agedep_val[k_par],rsv_age_groups$stationary_popul)
if (serial_loop) {    g(delta_susc,delta_susc_prop) %=% l_susc} else { delta_susc=l_susc[[1]]; delta_susc_prop=l_susc[[2]] }
# set initial conds
R0_rank_withinn_deptype_depval=(partable %>% group_by(dep_type,R0) %>% mutate(R0_no=row_number()))$R0_no[k_par]
if (R0_rank_withinn_deptype_depval==1){
initvals_sirs_model <- fcn_set_initconds(rsv_age_groups$stationary_popul,init_set=c("previous","fromscratch")[2],
init_cond_src=c("output","file")[1],ode_solution,init_seed=10,seed_vars="all",filename="") } else {
initvals_sirs_model <- matrix(ode_solution[nrow(ode_solution)-1,2:ncol(ode_solution)]) }
# set length of simulation and seasonality
l_seas<-fun_shutdown_seasforc(npi_dates,
years_pre_post_npi=c(ifelse(R0_rank_withinn_deptype_depval==1,simul_length_yr,round(simul_length_yr*0.5)),0),
season_width_wks=seasforc_width_wks,init_mt_day="06-01",ifelse(grepl("exp",partable$dep_type[k_par]),45,49),
forcing_above_baseline=partable$seasforce_peak[k_par], npireduc_strength=0.5)
if (serial_loop){ g(n_years,timesteps,simul_start_end,forcing_vector_npi) %=% l_seas} else {
timesteps=l_seas[[2]]; simul_start_end=l_seas[[3]]; forcing_vector_npi=l_seas[[4]] }
# set params
params<-list(list(birth_rates,matrix(unlist(lapply(uk_death_rate,function(x) rep(x,n_inf*n_compartment))))),
K_m,contmatr_rowvector,inf_vars_inds,susc_vars_inds,delta_susc)
# maternal immunity?
if (mat_imm_flag){ params[[7]] <- mat_imm_inds}
# interpolation fcns for seas forcing & extern introds
approx_seas_forc <- approxfun(data.frame(t=timesteps,seas_force=forcing_vector_npi))
approx_introd <- approxfun(data.frame(t=timesteps,as.numeric(timesteps %% 30==0)*10))
# run simul
if (!mat_imm_flag){ ode_solution <- lsoda(initvals_sirs_model,timesteps,func=sirs_seasonal_forc,parms=params) } else {
ode_solution <- lsoda(initvals_sirs_model,timesteps,func=sirs_seasonal_forc_mat_immun,parms=params)     }
df_cases_infs <- fcn_process_odesol_incid(ode_solution,n_age,n_inf,n_compartment,simul_start_end)
# print progress
print(paste0(round(1e2*k_par/nrow(partable)),"% , dep_val=",partable$dep_val[k_par],", R0=",round(r0_try,2),
", suscept=",paste0(round(delta_primary,3),collapse=","),", seas peak rel. baseline=",(partable$seasforce_peak[k_par]+1)*100,"%") )
sel_t_point <- unique((df_cases_infs %>% filter(date == as.Date("2019-07-01")))$t)
stat_sol_allparsets[,k_par] <- matrix(ode_solution[sel_t_point,2:ncol(ode_solution)]) # nrow(ode_solution)-1
# final population (it's stationary, shldnt change)
final_pop <- data.frame(agegroup=1:n_age,final=round(unlist(lapply(lapply((0:(n_age-1))*(n_inf*n_compartment),
function(x) (1:(n_inf*n_compartment))+x ), function(x_sum) sum(stat_sol_allparsets[1:(n_age*n_inf*n_compartment),k_par][x_sum])))))
# calc attack rates
sum_inf_epiyear_age <- left_join(df_cases_infs %>% mutate(year=year(date),epi_year=ifelse(date>ymd(paste(year(date),"-07-01")),
year(date),year(date)-1),in_out_season=ifelse(week(date)<=9 | week(date)>=41,"in","out")) %>%
group_by(epi_year,agegroup) %>% summarise(inf_tot=round(sum(value)),inf_in_seas=round(sum(value[in_out_season=="in"])),
max_incid_week=mean(week(date[value==max(value,na.rm=T)]))) %>% group_by(agegroup) %>% filter(epi_year>min(epi_year)),
final_pop,by="agegroup") %>%
mutate(attack_rate_perc=100*inf_tot/final,
seas_share=inf_in_seas/inf_tot,dep_val=partable$dep_val[k_par],par_id=partable$par_id[k_par],
seasforce_peak=partable$seasforce_peak[k_par],dep_type=partable$dep_type[k_par],R0=partable$R0[k_par])
# store parameters # list_delta_primary[[k_par]]=delta_primary
# store outputs
# if (serial_loop){
if (k_par==1) {all_sum_inf_epiyear_age=sum_inf_epiyear_age} else {
all_sum_inf_epiyear_age=rbind(all_sum_inf_epiyear_age,sum_inf_epiyear_age)
if (k_par==nrow(partable)) {
all_sum_inf_epiyear_age <- left_join(all_sum_inf_epiyear_age %>%
mutate(agegroup_name=factor(rsv_age_groups$agegroup_name[agegroup])),estim_attack_rates,by="agegroup_name") %>%
mutate(attack_rate_check=ifelse(attack_rate_perc>=min_est&attack_rate_perc<=max_est,T,F),
seas_share_check=ifelse(seas_share>seas_conc_lim,T,F)) } }
# } else { all_sum_inf_epiyear_age[[k_par]]=sum_inf_epiyear_age }
# parallel # left_join(,partable %>% select(par_id,dep_val,seasforce_peak),by=c("dep_val","seasforce_peak"))
} # end loop
round(proc.time()-tm,2)
npi_dates=as.Date(c("2020-03-26","2021-04-01")); seaspeakval=1/3; seasforc_width_wks=8
seasforc_width_wks
tm<-proc.time()
# foreach (k_par=1:nrow(partable),.packages=c("dplyr","deSolve","tidyr","lubridate")) %dopar% { #
for (k_par in 1:nrow(partable)){
### ### ###
# assign SUSCEPT params
delta_primary<-as.numeric(partable[k_par,] %>% select(contains("delta")))
l_susc=fcn_delta_susc(delta_primary,n_age,n_inf,partable$agedep_val[k_par],rsv_age_groups$stationary_popul)
if (serial_loop) {    g(delta_susc,delta_susc_prop) %=% l_susc} else { delta_susc=l_susc[[1]]; delta_susc_prop=l_susc[[2]] }
# set initial conds
R0_rank_withinn_deptype_depval=(partable %>% group_by(dep_type,R0) %>% mutate(R0_no=row_number()))$R0_no[k_par]
if (R0_rank_withinn_deptype_depval==1){
initvals_sirs_model <- fcn_set_initconds(rsv_age_groups$stationary_popul,init_set=c("previous","fromscratch")[2],
init_cond_src=c("output","file")[1],ode_solution,init_seed=10,seed_vars="all",filename="") } else {
initvals_sirs_model <- matrix(ode_solution[nrow(ode_solution)-1,2:ncol(ode_solution)]) }
# set length of simulation and seasonality
l_seas<-fun_shutdown_seasforc(npi_dates,
years_pre_post_npi=c(ifelse(R0_rank_withinn_deptype_depval==1,simul_length_yr,round(simul_length_yr*0.5)),0),
season_width_wks=seasforc_width_wks,init_mt_day="06-01",ifelse(grepl("exp",partable$dep_type[k_par]),45,49),
forcing_above_baseline=partable$seasforce_peak[k_par], npireduc_strength=0.5)
if (serial_loop){ g(n_years,timesteps,simul_start_end,forcing_vector_npi) %=% l_seas} else {
timesteps=l_seas[[2]]; simul_start_end=l_seas[[3]]; forcing_vector_npi=l_seas[[4]] }
# set params
params<-list(list(birth_rates,matrix(unlist(lapply(uk_death_rate,function(x) rep(x,n_inf*n_compartment))))),
K_m,contmatr_rowvector,inf_vars_inds,susc_vars_inds,delta_susc)
# maternal immunity?
if (mat_imm_flag){ params[[7]] <- mat_imm_inds}
# interpolation fcns for seas forcing & extern introds
approx_seas_forc <- approxfun(data.frame(t=timesteps,seas_force=forcing_vector_npi))
approx_introd <- approxfun(data.frame(t=timesteps,as.numeric(timesteps %% 30==0)*10))
# run simul
if (!mat_imm_flag){ ode_solution <- lsoda(initvals_sirs_model,timesteps,func=sirs_seasonal_forc,parms=params) } else {
ode_solution <- lsoda(initvals_sirs_model,timesteps,func=sirs_seasonal_forc_mat_immun,parms=params)     }
df_cases_infs <- fcn_process_odesol_incid(ode_solution,n_age,n_inf,n_compartment,simul_start_end)
# print progress
print(paste0(round(1e2*k_par/nrow(partable)),"% , dep_val=",partable$dep_val[k_par],", R0=",round(r0_try,2),
", suscept=",paste0(round(delta_primary,3),collapse=","),", seas peak rel. baseline=",(partable$seasforce_peak[k_par]+1)*100,"%") )
sel_t_point <- unique((df_cases_infs %>% filter(date == as.Date("2019-07-01")))$t)
stat_sol_allparsets[,k_par] <- matrix(ode_solution[sel_t_point,2:ncol(ode_solution)]) # nrow(ode_solution)-1
# final population (it's stationary, shldnt change)
final_pop <- data.frame(agegroup=1:n_age,final=round(unlist(lapply(lapply((0:(n_age-1))*(n_inf*n_compartment),
function(x) (1:(n_inf*n_compartment))+x ), function(x_sum) sum(stat_sol_allparsets[1:(n_age*n_inf*n_compartment),k_par][x_sum])))))
# calc attack rates
sum_inf_epiyear_age <- left_join(df_cases_infs %>% mutate(year=year(date),epi_year=ifelse(date>ymd(paste(year(date),"-07-01")),
year(date),year(date)-1),in_out_season=ifelse(week(date)<=9 | week(date)>=41,"in","out")) %>%
group_by(epi_year,agegroup) %>% summarise(inf_tot=round(sum(value)),inf_in_seas=round(sum(value[in_out_season=="in"])),
max_incid_week=mean(week(date[value==max(value,na.rm=T)]))) %>% group_by(agegroup) %>% filter(epi_year>min(epi_year)),
final_pop,by="agegroup") %>%
mutate(attack_rate_perc=100*inf_tot/final,
seas_share=inf_in_seas/inf_tot,dep_val=partable$dep_val[k_par],par_id=partable$par_id[k_par],
seasforce_peak=partable$seasforce_peak[k_par],dep_type=partable$dep_type[k_par],R0=partable$R0[k_par])
# store parameters # list_delta_primary[[k_par]]=delta_primary
# store outputs
# if (serial_loop){
if (k_par==1) {all_sum_inf_epiyear_age=sum_inf_epiyear_age} else {
all_sum_inf_epiyear_age=rbind(all_sum_inf_epiyear_age,sum_inf_epiyear_age)
if (k_par==nrow(partable)) {
all_sum_inf_epiyear_age <- left_join(all_sum_inf_epiyear_age %>%
mutate(agegroup_name=factor(rsv_age_groups$agegroup_name[agegroup])),estim_attack_rates,by="agegroup_name") %>%
mutate(attack_rate_check=ifelse(attack_rate_perc>=min_est&attack_rate_perc<=max_est,T,F),
seas_share_check=ifelse(seas_share>seas_conc_lim,T,F)) } }
# } else { all_sum_inf_epiyear_age[[k_par]]=sum_inf_epiyear_age }
# parallel # left_join(,partable %>% select(par_id,dep_val,seasforce_peak),by=c("dep_val","seasforce_peak"))
} # end loop
round(proc.time()-tm,2)
head(partable,2)
round(partable$R0[k_par],2)
tm<-proc.time()
# foreach (k_par=1:nrow(partable),.packages=c("dplyr","deSolve","tidyr","lubridate")) %dopar% { #
for (k_par in 1:nrow(partable)){
### ### ###
# assign SUSCEPT params
delta_primary<-as.numeric(partable[k_par,] %>% select(contains("delta")))
l_susc=fcn_delta_susc(delta_primary,n_age,n_inf,partable$agedep_val[k_par],rsv_age_groups$stationary_popul)
if (serial_loop) {    g(delta_susc,delta_susc_prop) %=% l_susc} else { delta_susc=l_susc[[1]]; delta_susc_prop=l_susc[[2]] }
# set initial conds
R0_rank_withinn_deptype_depval=(partable %>% group_by(dep_type,R0) %>% mutate(R0_no=row_number()))$R0_no[k_par]
if (R0_rank_withinn_deptype_depval==1){
initvals_sirs_model <- fcn_set_initconds(rsv_age_groups$stationary_popul,init_set=c("previous","fromscratch")[2],
init_cond_src=c("output","file")[1],ode_solution,init_seed=10,seed_vars="all",filename="") } else {
initvals_sirs_model <- matrix(ode_solution[nrow(ode_solution)-1,2:ncol(ode_solution)]) }
# set length of simulation and seasonality
l_seas<-fun_shutdown_seasforc(npi_dates,
years_pre_post_npi=c(ifelse(R0_rank_withinn_deptype_depval==1,simul_length_yr,round(simul_length_yr*0.5)),0),
season_width_wks=seasforc_width_wks,init_mt_day="06-01",ifelse(grepl("exp",partable$dep_type[k_par]),45,49),
forcing_above_baseline=partable$seasforce_peak[k_par], npireduc_strength=0.5)
if (serial_loop){ g(n_years,timesteps,simul_start_end,forcing_vector_npi) %=% l_seas} else {
timesteps=l_seas[[2]]; simul_start_end=l_seas[[3]]; forcing_vector_npi=l_seas[[4]] }
# set params
params<-list(list(birth_rates,matrix(unlist(lapply(uk_death_rate,function(x) rep(x,n_inf*n_compartment))))),
K_m,contmatr_rowvector,inf_vars_inds,susc_vars_inds,delta_susc)
# maternal immunity?
if (mat_imm_flag){ params[[7]] <- mat_imm_inds}
# interpolation fcns for seas forcing & extern introds
approx_seas_forc <- approxfun(data.frame(t=timesteps,seas_force=forcing_vector_npi))
approx_introd <- approxfun(data.frame(t=timesteps,as.numeric(timesteps %% 30==0)*10))
# run simul
if (!mat_imm_flag){ ode_solution <- lsoda(initvals_sirs_model,timesteps,func=sirs_seasonal_forc,parms=params) } else {
ode_solution <- lsoda(initvals_sirs_model,timesteps,func=sirs_seasonal_forc_mat_immun,parms=params)     }
df_cases_infs <- fcn_process_odesol_incid(ode_solution,n_age,n_inf,n_compartment,simul_start_end)
# print progress
print(paste0(round(1e2*k_par/nrow(partable)),"% , dep_val=",partable$dep_val[k_par],", R0=",round(partable$R0[k_par],2),
", suscept=",paste0(round(delta_primary,3),collapse=","),", seas peak rel. baseline=",(partable$seasforce_peak[k_par]+1)*100,"%") )
sel_t_point <- unique((df_cases_infs %>% filter(date == as.Date("2019-07-01")))$t)
stat_sol_allparsets[,k_par] <- matrix(ode_solution[sel_t_point,2:ncol(ode_solution)]) # nrow(ode_solution)-1
# final population (it's stationary, shldnt change)
final_pop <- data.frame(agegroup=1:n_age,final=round(unlist(lapply(lapply((0:(n_age-1))*(n_inf*n_compartment),
function(x) (1:(n_inf*n_compartment))+x ), function(x_sum) sum(stat_sol_allparsets[1:(n_age*n_inf*n_compartment),k_par][x_sum])))))
# calc attack rates
sum_inf_epiyear_age <- left_join(df_cases_infs %>% mutate(year=year(date),epi_year=ifelse(date>ymd(paste(year(date),"-07-01")),
year(date),year(date)-1),in_out_season=ifelse(week(date)<=9 | week(date)>=41,"in","out")) %>%
group_by(epi_year,agegroup) %>% summarise(inf_tot=round(sum(value)),inf_in_seas=round(sum(value[in_out_season=="in"])),
max_incid_week=mean(week(date[value==max(value,na.rm=T)]))) %>% group_by(agegroup) %>% filter(epi_year>min(epi_year)),
final_pop,by="agegroup") %>%
mutate(attack_rate_perc=100*inf_tot/final,
seas_share=inf_in_seas/inf_tot,dep_val=partable$dep_val[k_par],par_id=partable$par_id[k_par],
seasforce_peak=partable$seasforce_peak[k_par],dep_type=partable$dep_type[k_par],R0=partable$R0[k_par])
# store parameters # list_delta_primary[[k_par]]=delta_primary
# store outputs
# if (serial_loop){
if (k_par==1) {all_sum_inf_epiyear_age=sum_inf_epiyear_age} else {
all_sum_inf_epiyear_age=rbind(all_sum_inf_epiyear_age,sum_inf_epiyear_age)
if (k_par==nrow(partable)) {
all_sum_inf_epiyear_age <- left_join(all_sum_inf_epiyear_age %>%
mutate(agegroup_name=factor(rsv_age_groups$agegroup_name[agegroup])),estim_attack_rates,by="agegroup_name") %>%
mutate(attack_rate_check=ifelse(attack_rate_perc>=min_est&attack_rate_perc<=max_est,T,F),
seas_share_check=ifelse(seas_share>seas_conc_lim,T,F)) } }
# } else { all_sum_inf_epiyear_age[[k_par]]=sum_inf_epiyear_age }
# parallel # left_join(,partable %>% select(par_id,dep_val,seasforce_peak),by=c("dep_val","seasforce_peak"))
} # end loop
round(proc.time()-tm,2)
dim(C_m_polymod)
write_csv(C_m_polymod,"data/UK_contact_matrix_sum.csv")
class(C_m_polymod)
head(C_m_polymod)
dim(partable)
View(C_m_polymod)
matrix(data.frame(C_m_polymod))
(data.frame(C_m_polymod))
saveRDS(C_m_polymod,"data/UK_contact_matrix_sum.RDS")
xx<-readRDS("data/UK_contact_matrix_sum.RDS")
identical(xx,C_m_polymod)
df_plot_mean_age_shift <- full_output_mean_age %>% pivot_longer(!c(epi_year,par_id,dep_type,dep_val,R0,seasforce_peak,npi_str)) %>%
group_by(name,epi_year,par_id,dep_val,dep_type,R0) %>% # ,seasforce_peak
summarise(mean_val=mean(value),min_npi_val=min(value),max_npi_val=max(value)) %>% filter(epi_year==2021 & grepl("shift",name)) %>%
mutate(dep_type=ifelse(grepl("age",dep_type),"~age","~immunity")) %>% ungroup()
# %>% filter(dep_val %in% joint_dep_vals) %>% mutate(dep_val=as.numeric(factor(dep_val)))
# plot params
ratio_diff_flag <- "shift"
title_str=ifelse(ratio_diff_flag=="shift","shift (in months) from 2019 to 2021","(mean age in 2021)/(mean age in 2019)")
# colorpal=c(colorRampPalette(colors=c("orange","red"))(uniq_R0[1]),colorRampPalette(colors=c("darkgrey","black"))(uniq_R0[2]))
# PLOT mean age shift by large age groups
ggplot(df_plot_mean_age_shift %>% filter(grepl("<",name)) %>%
mutate(name=factor(name,levels=c("shift in average age of infection <5y","shift in average age of infection <15y"))) %>%
mutate(type_R0=paste0(dep_type,", R0=",R0)),
aes(x=factor(dep_val),y=mean_val*12,group=interaction(type_R0))) + # ,size=seasforce_peak seasforce_peak,
geom_point(aes(color=type_R0),position=position_dodge(width=dodge_val)) + scale_size(range=c(0.7,2)/2.5) +
geom_pointrange(aes(color=type_R0,ymin=min_npi_val*12,ymax=max_npi_val*12),position=position_dodge(width=dodge_val)) +
facet_wrap(~name,scales="free") + scale_color_manual(values=colorpal) + geom_vline(xintercept=0.5+0:8,linetype="dashed",size=1/3) +
xlab("strength of dependence on age/exposure") + ylab(title_str) + labs(color=paste0(""),size="seasonal forcing (>baseline)") +
theme_bw() + standard_theme + scale_x_discrete(expand=expansion(0.12,0)) + guides(color=guide_legend(ncol=3)) + # ,byrow=TRUE
theme(legend.position="top",axis.title.x=element_text(size=15),axis.text.x=element_text(size=15),axis.text.y=element_text(size=15),
strip.text=element_text(size=15),legend.text=element_text(size=13),legend.title=element_text(size=14))
df_plot_mean_age_shift <- full_output_mean_age %>% pivot_longer(!c(epi_year,par_id,dep_type,dep_val,R0,seasforce_peak,npi_str)) %>%
group_by(name,epi_year,par_id,dep_val,dep_type,R0) %>% # ,seasforce_peak
summarise(mean_val=mean(value),min_npi_val=min(value),max_npi_val=max(value)) %>% filter(epi_year==2021 & grepl("shift",name)) %>%
mutate(dep_type=ifelse(grepl("age",dep_type),"~age","~immunity")) %>% ungroup()
foldername
# read_csv(simul_output/parscan/sel_parsets/mat_imm/parsets_filtered.csv)
parsets_filtered <- read_csv("simul_output/parscan/sel_parsets/mat_imm/parsets_filtered.csv")
parsets_filtered <- parsets_filtered_allyears %>% filter(epi_year==2019) %>% group_by(dep_type,dep_val) %>% mutate(n_dep_val=n()) %>%
filter(n_dep_val>1) %>% group_by(dep_type) %>% mutate(dep_val_sel=as.numeric(factor(dep_val)))
parsets_filtered_allyears <- parsets_filtered_allyears %>% filter(epi_year==2019) %>% group_by(dep_type,dep_val) %>% mutate(n_dep_val=n()) %>%
filter(n_dep_val>1) %>% group_by(dep_type) %>% mutate(dep_val_sel=as.numeric(factor(dep_val)))
parsets_filtered_allyears <- read_csv("simul_output/parscan/sel_parsets/mat_imm/parsets_filtered.csv")
parsets_filtered <- parsets_filtered_allyears %>% filter(epi_year==2019) %>% group_by(dep_type,dep_val) %>% mutate(n_dep_val=n()) %>%
filter(n_dep_val>1) %>% group_by(dep_type) %>% mutate(dep_val_sel=as.numeric(factor(dep_val)))
for (k_par in 1:nrow(parsets_filtered)){
if (k_par==1) {df_suscept=data.frame()}
delta_primary <- as.numeric(left_join(parsets_filtered,partable,by=c("par_id","dep_val","dep_type","seasforce_peak","R0"))[k_par,] %>%
ungroup() %>% select(contains("delta")) )
agedep_fact<-left_join(parsets_filtered,partable,by=c("par_id","dep_val","dep_type","seasforce_peak","R0"))[k_par,]$agedep_val
g(delta_susc,delta_susc_prop) %=% fcn_delta_susc(delta_primary,n_age,n_inf,agedep_fact,rsv_age_groups$stationary_popul)
df <- data.frame(t(round(delta_susc_prop,5))); colnames(df) <-c("inf #1","inf #2","inf #3")
df <- bind_cols(df,parsets_filtered[k_par,]) %>% rowid_to_column("agegr_no") %>%
mutate(agegroup=factor(rsv_age_groups$agegroup_name,levels=unique(rsv_age_groups$agegroup_name)))
if (k_par==1) {df_suscept=df} else {df_suscept=rbind(df_suscept,df)
}
}
ggplot(df_suscept %>% group_by(dep_type,dep_val_sel,agegroup) %>% filter(R0==min(R0)) %>% pivot_longer(c(`inf #1`,`inf #2`,`inf #3`)) %>%
mutate(name=gsub("inf","infection",name)) %>% rename(dependence=dep_val_sel)) +
geom_hpline(aes(x=agegroup,y=value,group=interaction(dependence,name),color=factor(name)),
width=0.95/3,size=1,position=position_dodge(width=1)) +
facet_grid(dependence~dep_type,labeller=labeller(dependence=label_both)) +
geom_vline(xintercept=0.5+(0:11),size=1/3,linetype="dashed") +
scale_y_log10(expand=expansion(0.04,0)) + scale_x_discrete(expand=expansion(0.02,0)) +
theme_bw() + standard_theme + ylab("susceptibility to infection") + labs(color="",linetype="") +
guides(color=guide_legend(byrow=TRUE))  + theme(legend.text=element_text(size=14),legend.title=element_text(size=14),
axis.text.x=element_text(size=14),axis.text.y=element_text(size=14),strip.text=element_text(size=15))
output_files <- list.files(foldername,pattern="df_cases_infs_npi_contactlevel_")
getwd()
foldername<-"simul_output/parscan/sel_parsets/mat_imm/"
output_files <- list.files(foldername,pattern="df_cases_infs_npi_contactlevel_")
output_files
for (k_npi in 0:4){
full_output <- read_csv(paste0(foldername,output_files[grepl(paste0("_",k_npi*10,"pct"),output_files)])) %>%
mutate(npi_str=k_npi/10,epi_year=ifelse(date>ymd(paste(year(date),"-07-01")),year(date),year(date)-1),
in_out_season=ifelse(week(date)<=9 | week(date)>=41,"in","out")) %>% filter(par_id %in% parsets_filtered$par_id) %>%
group_by(epi_year,par_id,dep_type,dep_val,R0,seasforce_peak,npi_str,agegroup) %>%
summarise(sum_inf=sum(value),max_inf=max(value),peak_week=week(date[value==max(value)]),
resurg_week_20pct=week(min(date[value>=0.2*max(value)])) ) # %>% ungroup()
full_output <- left_join(full_output,rsv_age_groups %>% select(agegroup_name,mean_age_weighted) %>% mutate(agegroup=row_number()),by="agegroup")
if (k_npi==0) {npi_scan_sum_infs_by_age=full_output} else {npi_scan_sum_infs_by_age=rbind(npi_scan_sum_infs_by_age,full_output)}
}
full_output_mean_age = npi_scan_sum_infs_by_age %>% group_by(dep_type) %>% mutate(dep_val=as.numeric(factor(dep_val))) %>%
group_by(epi_year,par_id,dep_type,dep_val,R0,seasforce_peak,npi_str) %>%
summarise(mean_age=sum((sum_inf/sum(sum_inf))*mean_age_weighted),
mean_age_under_5=sum((sum_inf[agegroup<=7]/sum(sum_inf[agegroup<=7]))*mean_age_weighted[agegroup<=7]),
mean_age_under_15=sum((sum_inf[agegroup<=8]/sum(sum_inf[agegroup<=8]))*mean_age_weighted[agegroup<=8])) %>%
group_by(par_id,npi_str) %>% mutate(
`shift in average age of infection <5y`=ifelse(epi_year>=2021,mean_age_under_5[epi_year==2021]-mean(mean_age_under_5[epi_year<2020]),NA),
`shift in average age of infection <15y`=ifelse(epi_year>=2021,mean_age_under_15[epi_year==2021]-mean(mean_age_under_15[epi_year<2020]),NA))
df_plot_mean_age_shift <- full_output_mean_age %>% pivot_longer(!c(epi_year,par_id,dep_type,dep_val,R0,seasforce_peak,npi_str)) %>%
group_by(name,epi_year,par_id,dep_val,dep_type,R0) %>% # ,seasforce_peak
summarise(mean_val=mean(value),min_npi_val=min(value),max_npi_val=max(value)) %>% filter(epi_year==2021 & grepl("shift",name)) %>%
mutate(dep_type=ifelse(grepl("age",dep_type),"~age","~immunity")) %>% ungroup()
ratio_diff_flag <- "shift"
title_str=ifelse(ratio_diff_flag=="shift","shift (in months) from 2019 to 2021","(mean age in 2021)/(mean age in 2019)")
# colorpal=c(colorRampPalette(colors=c("orange","red"))(uniq_R0[1]),colorRampPalette(colors=c("darkgrey","black"))(uniq_R0[2]))
# PLOT mean age shift by large age groups
ggplot(df_plot_mean_age_shift %>% filter(grepl("<",name)) %>%
mutate(name=factor(name,levels=c("shift in average age of infection <5y","shift in average age of infection <15y"))) %>%
mutate(type_R0=paste0(dep_type,", R0=",R0)),
aes(x=factor(dep_val),y=mean_val*12,group=interaction(type_R0))) + # ,size=seasforce_peak seasforce_peak,
geom_point(aes(color=type_R0),position=position_dodge(width=dodge_val)) + scale_size(range=c(0.7,2)/2.5) +
geom_pointrange(aes(color=type_R0,ymin=min_npi_val*12,ymax=max_npi_val*12),position=position_dodge(width=dodge_val)) +
facet_wrap(~name,scales="free") + scale_color_manual(values=colorpal) + geom_vline(xintercept=0.5+0:8,linetype="dashed",size=1/3) +
xlab("strength of dependence on age/exposure") + ylab(title_str) + labs(color=paste0(""),size="seasonal forcing (>baseline)") +
theme_bw() + standard_theme + scale_x_discrete(expand=expansion(0.12,0)) + guides(color=guide_legend(ncol=3)) + # ,byrow=TRUE
theme(legend.position="top",axis.title.x=element_text(size=15),axis.text.x=element_text(size=15),axis.text.y=element_text(size=15),
strip.text=element_text(size=15),legend.text=element_text(size=13),legend.title=element_text(size=14))
# save
ratio_diff_flag <- "shift"; dodge_val=1
title_str=ifelse(ratio_diff_flag=="shift","shift (in months) from 2019 to 2021","(mean age in 2021)/(mean age in 2019)")
# colorpal=c(colorRampPalette(colors=c("orange","red"))(uniq_R0[1]),colorRampPalette(colors=c("darkgrey","black"))(uniq_R0[2]))
# PLOT mean age shift by large age groups
ggplot(df_plot_mean_age_shift %>% filter(grepl("<",name)) %>%
mutate(name=factor(name,levels=c("shift in average age of infection <5y","shift in average age of infection <15y"))) %>%
mutate(type_R0=paste0(dep_type,", R0=",R0)),
aes(x=factor(dep_val),y=mean_val*12,group=interaction(type_R0))) + # ,size=seasforce_peak seasforce_peak,
geom_point(aes(color=type_R0),position=position_dodge(width=dodge_val)) + scale_size(range=c(0.7,2)/2.5) +
geom_pointrange(aes(color=type_R0,ymin=min_npi_val*12,ymax=max_npi_val*12),position=position_dodge(width=dodge_val)) +
facet_wrap(~name,scales="free") + scale_color_manual(values=colorpal) + geom_vline(xintercept=0.5+0:8,linetype="dashed",size=1/3) +
xlab("strength of dependence on age/exposure") + ylab(title_str) + labs(color=paste0(""),size="seasonal forcing (>baseline)") +
theme_bw() + standard_theme + scale_x_discrete(expand=expansion(0.12,0)) + guides(color=guide_legend(ncol=3)) + # ,byrow=TRUE
theme(legend.position="top",axis.title.x=element_text(size=15),axis.text.x=element_text(size=15),axis.text.y=element_text(size=15),
strip.text=element_text(size=15),legend.text=element_text(size=13),legend.title=element_text(size=14))
uniq_R0
cumul_inf_pre_post_npi
uniq_R0=(df_plot_mean_age_shift %>% group_by(dep_type) %>% summarise(n=length(unique(R0))))$n; dodge_val=1
uniq_R0
colorpal=c(colorRampPalette(colors=c("orange","red"))(uniq_R0[1]),colorRampPalette(colors=c("darkgrey","black"))(uniq_R0[2]))
ggplot(df_plot_mean_age_shift %>% filter(grepl("<",name)) %>%
mutate(name=factor(name,levels=c("shift in average age of infection <5y","shift in average age of infection <15y"))) %>%
mutate(type_R0=paste0(dep_type,", R0=",R0)),
aes(x=factor(dep_val),y=mean_val*12,group=interaction(type_R0))) + # ,size=seasforce_peak seasforce_peak,
geom_point(aes(color=type_R0),position=position_dodge(width=dodge_val)) + scale_size(range=c(0.7,2)/2.5) +
geom_pointrange(aes(color=type_R0,ymin=min_npi_val*12,ymax=max_npi_val*12),position=position_dodge(width=dodge_val)) +
facet_wrap(~name,scales="free") + scale_color_manual(values=colorpal) + geom_vline(xintercept=0.5+0:8,linetype="dashed",size=1/3) +
xlab("strength of dependence on age/exposure") + ylab(title_str) + labs(color=paste0(""),size="seasonal forcing (>baseline)") +
theme_bw() + standard_theme + scale_x_discrete(expand=expansion(0.12,0)) + guides(color=guide_legend(ncol=3)) + # ,byrow=TRUE
theme(legend.position="top",axis.title.x=element_text(size=15),axis.text.x=element_text(size=15),axis.text.y=element_text(size=15),
strip.text=element_text(size=15),legend.text=element_text(size=13),legend.title=element_text(size=14))
head(df_plot_mean_age_shift,2)
df_plot_mean_age_shift <- full_output_mean_age %>% pivot_longer(!c(epi_year,par_id,dep_type,dep_val,R0,seasforce_peak,npi_str)) %>%
group_by(name,epi_year,par_id,dep_val,dep_type,R0) %>% # ,seasforce_peak
summarise(mean_val=mean(value),min_npi_val=min(value),max_npi_val=max(value)) %>% filter(epi_year==2021 & grepl("shift",name)) %>%
mutate(dep_type=ifelse(grepl("age",dep_type),"~age","~immunity")) %>% ungroup()
# plot params
ratio_diff_flag <- "shift"; dodge_val=1
title_str=ifelse(ratio_diff_flag=="shift","shift (in months) from 2019 to 2021","(mean age in 2021)/(mean age in 2019)")
# uniq_R0=(df_plot_mean_age_shift %>% group_by(dep_type) %>% summarise(n=length(unique(R0))))$n; dodge_val=1
# colorpal=c(colorRampPalette(colors=c("orange","red"))(uniq_R0[1]),colorRampPalette(colors=c("darkgrey","black"))(uniq_R0[2]))
# PLOT mean age shift by large age groups
ggplot(df_plot_mean_age_shift %>% filter(grepl("<",name)) %>%
mutate(name=factor(name,levels=c("shift in average age of infection <5y","shift in average age of infection <15y"))) %>%
mutate(type_R0=paste0(dep_type,", R0=",R0)),
aes(x=factor(dep_val),y=mean_val*12,group=interaction(type_R0))) + # ,size=seasforce_peak seasforce_peak,
geom_point(aes(color=type_R0),position=position_dodge(width=dodge_val)) + scale_size(range=c(0.7,2)/2.5) +
geom_pointrange(aes(color=type_R0,ymin=min_npi_val*12,ymax=max_npi_val*12),position=position_dodge(width=dodge_val)) +
facet_wrap(~name,scales="free") + scale_color_manual(values=colorpal) + geom_vline(xintercept=0.5+0:8,linetype="dashed",size=1/3) +
xlab("strength of dependence on age/exposure") + ylab(title_str) + labs(color=paste0(""),size="seasonal forcing (>baseline)") +
theme_bw() + standard_theme + scale_x_discrete(expand=expansion(0.12,0)) + guides(color=guide_legend(ncol=3)) + # ,byrow=TRUE
theme(legend.position="top",axis.title.x=element_text(size=15),axis.text.x=element_text(size=15),axis.text.y=element_text(size=15),
strip.text=element_text(size=15),legend.text=element_text(size=13),legend.title=element_text(size=14))
ggsave(paste0(foldername,"resurgence_mean_age_",ratio_diff_flag,"_2021_2019_seasfor_aver.png"),width=43,height=25,units="cm")
