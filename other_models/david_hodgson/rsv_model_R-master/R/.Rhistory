knitr::opts_chunk$set(echo = TRUE,
root.dir='~/documents/ptmc/calibration/'
)
library(Rcpp)       # For c++ intergration
library(RcppEigen)  # Ditto
library(coda)       # Ditto
library(tidyverse)
library(parallel)
library(MASS)
library(foreach)
library(gridExtra)
library(doParallel)
library(BayesianTools)
#setwd("~/documents/ptmc/calibration")
source('./src/helpers.R') # some important helper functions
library(Rcpp)       # For c++ intergration
library(RcppEigen)  # Ditto
library(coda)       # Ditto
library(tidyverse)
library(parallel)
library(MASS)
library(foreach)
library(gridExtra)
library(doParallel)
library(BayesianTools)
file.path = '~/documents/ptmc/rsv_model' # change as appropriate
#setwd("~/documents/ptmc/calibration")
source(paste0(file.path, '/src/helpers.R')) # some important helper functions
load(file=paste0(file.path, '/Rdata/rsv_data.Rda'))   # Load in model data, including observation data (which is made up (not the same as I used in the paper).
sourceCpp(paste0(file.path, "/src/logLikelihoodModule.cpp")) # ensure c++14 is enabled
classEvaluateLogLikelihood <- new(EvaluateLogLikelihood, numberDailyLiveBirths, population, ageGroupBoundary) # Calls class
classEvaluateLogLikelihood$contactMatrixPhy <- contactMatrixPhy
classEvaluateLogLikelihood$contactMatrixCon <- contactMatrixCon
classEvaluateLogLikelihood$observedData <- as.matrix(observationalData)
classEvaluateLogLikelihood$lowerParamSupport <- fit.par$lowerParSupport
classEvaluateLogLikelihood$upperParamSupport <- fit.par$upperParSupport
classEvaluateLogLikelihood$run_full <- 3*52*7 # number of days to fit the data and model to
# Get the log likelihood
llikelihood = function(params){
ll <- classEvaluateLogLikelihood$evaluateLogLikelihoodCpp(params)
if (ll == -Inf) # This is to stop infinite log likelihoods gettings stuck
ll = -1000000
return(ll)
}
# Get the log priors (density and samplers)
density = function(params){
p = 0
for (i in 1:25){
if (params[i] < fit.par$lowerParSupport[i] || params[i] > fit.par$upperParSupport[i]){
return(log(0))
}
else{
p <- p + prior(params[i], fit.par$lowerParSupport[i], fit.par$upperParSupport[i], priorDistDensity[[i]], TRUE, priorDistPar1[i], priorDistPar2[i])
}
}
return(p)
}
sampler = function(n=1){
s <- vector()
for (i in 1:25){
s[i] <- prior.sample(fit.par$lowerParSupport[i], fit.par$upperParSupport[i], priorDistSample[[i]], priorDistPar1[i], priorDistPar2[i])
}
s
}
priors <- createPrior(density = density, sampler = sampler, lower = fit.par$lowerParSupport, upper = fit.par$upperParSupport)
# Create Bayesian Setup, this can be used in the Parallel tempering function
bayesianSetup <- createBayesianSetup(llikelihood, priors, names = rownames(fit.par$namesOfParameters))
# Differential Evoluation with Snooker
settingsDezs <- list(iterations = 1000000, nrChains = 3, thin = 10)
outDezs <- runMCMC(bayesianSetup = bayesianSetup, sampler = "DEzs", settings = settingsDezs) # Standard function in Bayesian tools
sourceCpp(paste0(file.path, "/src/logLikelihoodModule.cpp")) # ensure c++14 is enabled
classEvaluateLogLikelihood <- new(EvaluateLogLikelihood, numberDailyLiveBirths, population, ageGroupBoundary) # Calls class
classEvaluateLogLikelihood$contactMatrixPhy <- contactMatrixPhy
classEvaluateLogLikelihood$contactMatrixCon <- contactMatrixCon
classEvaluateLogLikelihood$observedData <- as.matrix(observationalData)
classEvaluateLogLikelihood$lowerParamSupport <- fit.par$lowerParSupport
classEvaluateLogLikelihood$upperParamSupport <- fit.par$upperParSupport
classEvaluateLogLikelihood$run_full <- 7*52*7 # number of days to fit the data and model to
# Differential Evoluation with Snooker
settingsDezs <- list(iterations = 1000000, nrChains = 3, thin = 10)
outDezs <- runMCMC(bayesianSetup = bayesianSetup, sampler = "DEzs", settings = settingsDezs) # Standard function in Bayesian tools
